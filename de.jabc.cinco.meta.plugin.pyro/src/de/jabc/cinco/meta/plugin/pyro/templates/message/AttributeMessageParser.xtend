package de.jabc.cinco.meta.plugin.pyro.templates.message

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type
import mgl.Attribute
import mgl.Enumeration
import de.jabc.cinco.meta.plugin.pyro.utils.ModelParser
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EPackage

class AttributeMessageParser implements Templateable{
	
	override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums,ArrayList<GraphModel> graphModels,ArrayList<EPackage> ecores)
	'''
package de.ls5.cinco.pyro.message.«graphModel.name.toFirstLower»;

import de.ls5.cinco.pyro.transformation.api.«graphModel.name.toFirstLower».*;
import de.ls5.cinco.pyro.message.MessageParser;
import de.ls5.dywa.generated.entity.«graphModel.name.toFirstUpper»;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by Pyro CINCO Meta plugin
 */
public class AttributeMessageParser {

    public static JSONObject attributeElement(String jsonString,C«graphModel.name.toFirstUpper» c«graphModel.name.toFirstUpper»){
        JSONObject receivedMessage = MessageParser.parse(jsonString);
        String muId = (String) receivedMessage.get("muId");
        JSONArray element = (JSONArray) receivedMessage.get("element");
        if(receivedMessage.get("type").equals("GraphModel")) {
            «FOR int index : 0..< ModelParser.getNoUserDefinedAttributtes(graphModel.attributes,enums).size »
			JSONObject «ModelParser.getNoUserDefinedAttributtes(graphModel.attributes,enums).get(index).name.toFirstLower» = (JSONObject) element.get(«index»);
			«this.createAttribute(ModelParser.getNoUserDefinedAttributtes(graphModel.attributes,enums).get(index),graphModel.name,enums,graphModel)»
			«ENDFOR»
			return getAttributeResponse(true,0,muId);
        }
        long dywaId = Long.parseLong(""+receivedMessage.get("dywaId"));
        «FOR StyledEdge sn:edges»
		if(receivedMessage.get("name").equals("«sn.modelElement.name.toFirstUpper»")) {
		    C«sn.modelElement.name.toFirstUpper» c«sn.modelElement.name.toFirstUpper» = c«graphModel.name.toFirstUpper».getC«sn.modelElement.name.toFirstUpper»(dywaId);
			«FOR int index : 0..<ModelParser.getNoUserDefinedAttributtes(sn.modelElement.attributes,enums).size »
			JSONObject «ModelParser.getNoUserDefinedAttributtes(sn.modelElement.attributes,enums).get(index).name.toFirstLower» = (JSONObject) element.get(«index»);
			«this.createAttribute(ModelParser.getNoUserDefinedAttributtes(sn.modelElement.attributes,enums).get(index),sn.modelElement.name,enums,graphModel)»
			«ENDFOR»
		    return getAttributeResponse(true,dywaId,muId);
		}
        «ENDFOR»
		«FOR StyledNode sn:nodes»
		if(receivedMessage.get("name").equals("«sn.modelElement.name.toFirstUpper»")) {
		    C«sn.modelElement.name.toFirstUpper» c«sn.modelElement.name.toFirstUpper» = c«graphModel.name.toFirstUpper».getC«sn.modelElement.name.toFirstUpper»(dywaId);
			«FOR int index : 0..<ModelParser.getNoUserDefinedAttributtes(sn.modelElement.attributes,enums).size »
			JSONObject «ModelParser.getNoUserDefinedAttributtes(sn.modelElement.attributes,enums).get(index).name.toFirstLower» = (JSONObject) element.get(«index»);
			«this.createAttribute(ModelParser.getNoUserDefinedAttributtes(sn.modelElement.attributes,enums).get(index),sn.modelElement.name,enums,graphModel)»
			«ENDFOR»
			return getAttributeResponse(true,dywaId,muId);
		}
        «ENDFOR»
        return getAttributeErrorResponse(muId);
    }

    private static JSONObject getResponse() {
        JSONObject response = new JSONObject();
        return response;
    }

    private static JSONObject getAttributeResponse(boolean valid,long id,String muiId) {
        JSONObject response = getResponse();
        response.put("valid",valid);
        response.put("dywaId",id);
        response.put("muId",muiId);
        return response;
    }

    private static JSONObject getAttributeErrorResponse(String muiId) {
        JSONObject response = getResponse();
        response.put("valid",false);
        response.put("muId",muiId);
        return response;
    }
}
	

	'''
	
	def createAttribute(mgl.Attribute attribute,String modelName,ArrayList<Type> enums,mgl.GraphModel graphModel)
	'''
	«IF !ModelParser.isUserDefinedType(attribute,enums) && !ModelParser.isReferencedModelType(graphModel,attribute)»
	«IF attribute.upperBound == 1 && (attribute.lowerBound == 0 || attribute.lowerBound == 1)»
	«this.createPrimativeAttribute(attribute,modelName,enums)»
	«ELSE»
	«this.createListAttribute(attribute,modelName,enums)»
	«ENDIF»
	«ENDIF»
	'''
	
	def createListAttribute(Attribute attribute, String name,ArrayList<Type> enums)
	'''
	// «attribute.name.toFirstUpper»
	JSONArray «attribute.name.toFirstLower»Values = (JSONArray) «attribute.name.toFirstLower».get("values");
	List<String> «attribute.name.toFirstLower»ValuesList = new ArrayList<>();
	for(Object «attribute.name.toFirstLower»Value:«attribute.name.toFirstLower»Values) {
	    «this.createPrimativeAttributeValuesList(attribute,attribute.name+"Value",name,enums)»
	}
	c«name.toFirstUpper».get«attribute.name.toFirstUpper»().clear();
	c«name.toFirstUpper».set«attribute.name.toFirstUpper»(«attribute.name.toFirstLower»ValuesList);
	'''
	
	def createPrimativeAttribute(Attribute attribute, String string, ArrayList<Type> enums)
	'''
	// «attribute.name.toFirstUpper»
	«this.createPrimativeAttributeValues(attribute,attribute.name,string,enums)»
	'''
	
	def createPrimativeAttributeValues(Attribute attribute,String attrName, String string, ArrayList<Type> enums)
	'''
	if(«attribute.name.toFirstLower».get("values") != null) {
	«IF attribute.type.equals("EString")»
	c«string.toFirstUpper».set«attribute.name.toFirstUpper»((String) «attribute.name.toFirstLower».get("values"));
	«ELSEIF attribute.type.equals("EInt")»
	c«string.toFirstUpper».set«attribute.name.toFirstUpper»(Integer.parseInt(""+«attribute.name.toFirstLower».get("values")));
	«ELSEIF attribute.type.equals("EDouble")»
	c«string.toFirstUpper».set«attribute.name.toFirstUpper»(Double.parseDouble(""+«attribute.name.toFirstLower».get("values")));
	«ELSEIF attribute.type.equals("EBoolean")»
	c«string.toFirstUpper».set«attribute.name.toFirstUpper»(Boolean.parseBoolean(""+«attribute.name.toFirstLower».get("values")));
	«ELSE»
	JSONObject «attribute.name.toFirstLower»Values = (JSONObject) «attribute.name.toFirstLower».get("values");
	c«string.toFirstUpper».set«attribute.name.toFirstUpper»(""+«attribute.name.toFirstLower»Values.get("selected"));
	«ENDIF»
	}
	'''
	
	def createPrimativeAttributeValuesList(Attribute attribute,String attrName, String string, ArrayList<Type> enums)
	'''
	«IF attribute.type.equals("EString") ||  attribute.type.equals("EInt") || attribute.type.equals("EDouble") || attribute.type.equals("EBoolean")»
	JSONObject «attrName.toFirstLower»Values = (JSONObject) «attrName.toFirstLower»;
	if(«attrName.toFirstLower»Values.get("values") != null) {
	«attribute.name.toFirstLower»ValuesList.add(""+«attrName.toFirstLower»Values.get("values"));
	}
	«ELSE»
	JSONObject «attrName.toFirstLower»Values = (JSONObject) ((JSONObject) «attrName.toFirstLower»).get("values");
	if(«attrName.toFirstLower»Values.get("selected") != null) {
	«attribute.name.toFirstLower»ValuesList.add(""+«attrName.toFirstLower»Values.get("selected"));
	}
	«ENDIF»
	'''
	
	

	
	
}