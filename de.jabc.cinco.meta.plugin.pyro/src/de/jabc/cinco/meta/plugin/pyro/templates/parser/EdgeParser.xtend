package de.jabc.cinco.meta.plugin.pyro.templates.parser

import de.jabc.cinco.meta.plugin.pyro.templates.ElementTemplateable
import de.jabc.cinco.meta.plugin.pyro.model.StyledModelElement
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type
import mgl.Attribute
import de.jabc.cinco.meta.plugin.pyro.utils.ModelParser

class EdgeParser implements ElementTemplateable {
	
	override create(StyledModelElement sme, GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums)
	'''
package de.ls5.cinco.parser.«graphModel.name.toFirstLower»;

import de.ls5.dywa.generated.entity.«sme.modelElement.name.toFirstUpper»;
import de.ls5.dywa.generated.entity.Point;
import de.ls5.cinco.transformation.api.«graphModel.name.toFirstLower».*;
«IF ModelParser.isCustomeActionAvailable(graphModel)»
import de.ls5.cinco.custom.action.«graphModel.name.toFirstLower».*;
«ENDIF»
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import de.ls5.cinco.parser.PointParser;
import java.util.List;
import java.util.stream.Collectors;


/**
 * Generated by Pyro CINCO Meta Plugin
 */
public class «sme.modelElement.name.toFirstUpper»Parser {


    public static JSONObject toJSON(«sme.modelElement.name.toFirstUpper» «sme.modelElement.name.toFirstLower») {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("cinco_id",new Long(«sme.modelElement.name.toFirstLower».getId()));
        JSONArray «sme.modelElement.name.toFirstLower»Attributes = new JSONArray();
        
        //Attributes
        «FOR Attribute attribute:sme.modelElement.attributes»
        «AttributeParser.createAttribute(attribute,sme.modelElement.name,enums,graphModel)»
        «ENDFOR»
        return jsonObject;
    }

    public static String toJSONPreString(«sme.modelElement.name.toFirstUpper» «sme.modelElement.name.toFirstLower») {
        String jsonString =
                "var %s = new joint.shapes.devs.«sme.modelElement.name.toFirstUpper»(%s);\n" +
                        "graph.addCells([%s]);\n" +
                        "%s.set('vertices', %s);\n";
        return String.format(
                jsonString,
                «sme.modelElement.name.toFirstLower».getName(),
                toJSON(«sme.modelElement.name.toFirstLower»).toJSONString(),
                «sme.modelElement.name.toFirstLower».getName(),
                «sme.modelElement.name.toFirstLower».getName(),
                verticalsToJSONString(«sme.modelElement.name.toFirstLower».getbendingPoints_Point())
        );

    }
    
    public static String toJSONPostString(«sme.modelElement.name.toFirstUpper» «sme.modelElement.name.toFirstLower») {
        String jsonString =
                        "%s.set('source', { id: %s .id });\n" +
                        "%s.set('target', { id: %s .id });\n";
        return String.format(
                jsonString,
                «sme.modelElement.name.toFirstLower».getName(),
                «sme.modelElement.name.toFirstLower».getsourceElement().getName(),
                «sme.modelElement.name.toFirstLower».getName(),
                «sme.modelElement.name.toFirstLower».gettargetElement().getName()
        );

    }

    public static String verticalsToJSONString(List<Point> pointList){
        JSONArray jsonArray = pointList.stream().map(PointParser::toJSON).collect(Collectors.toCollection(() -> new JSONArray()));
        return jsonArray.toJSONString();
    }

}
	
	'''
	
}