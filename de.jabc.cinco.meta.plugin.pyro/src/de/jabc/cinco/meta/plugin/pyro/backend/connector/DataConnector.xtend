package de.jabc.cinco.meta.plugin.pyro.backend.connector

import de.jabc.cinco.meta.plugin.pyro.util.Backend
import de.jabc.cinco.meta.plugin.pyro.util.Generatable
import de.jabc.cinco.meta.plugin.pyro.util.GeneratorCompound
import mgl.Attribute
import mgl.GraphModel
import mgl.ModelElement

class DataConnector extends Generatable {
	
	protected extension Backend = new Backend()
	
	new(GeneratorCompound gc) {
		super(gc)
	}
	
	def fileNameDataConnector()'''PyroDataConnector«gc.projectName».java'''
	
	def contentDataConnector()'''
	package info.scce.pyro.data;

		import de.ls5.dywa.connect.DyWAConnector;
		import de.ls5.dywa.connect.DyWADataHelper;
		import de.ls5.dywa.entities.property.PropertyType;

		import javax.enterprise.context.RequestScoped;
		import javax.inject.Inject;
		import javax.inject.Named;
		import java.nio.file.Path;
		import java.io.IOException;
		import java.util.List;
		import java.util.LinkedList;
		import de.ls5.dywa.annotations.ExecutionPriority;
		
		/**
		 * Generated by {@code DataModelsGenerator}.
		 */
		@Named
		@RequestScoped
		@ExecutionPriority(3)
		public class PyroDataConnector«gc.projectName» implements DyWAConnector {
			@Inject
			private DyWADataHelper data;
			
			@Override
			public void interactWithDyWA() {
				data.load("DyWADataModel: «gc.projectName»");
				//pyro core
				data.createConcreteType("PyroElement", "core.PyroElement", "info.scce.pyro.core");
				data.createConcreteType("PyroUser", "core.PyroUser", "info.scce.pyro.core");
				data.createConcreteType("PyroFolder", "core.PyroFolder", "info.scce.pyro.core");
				data.createConcreteType("PyroProject", "core.PyroProject", "info.scce.pyro.core");
				«"PyroProject".superType("PyroFolder")»
				//graphmodel ecore
				data.createConcreteType("IdentifiableElement", "core.IdentifiableElement", "info.scce.pyro.core");
				«"IdentifiableElement".superType("PyroElement")»
				data.createConcreteType("ModelElement", "core.ModelElement", "info.scce.pyro.core");
				«"ModelElement".superType("IdentifiableElement")»
				data.createConcreteType("ModelElementContainer", "core.ModelElementContainer", "info.scce.pyro.core");
				«"ModelElementContainer".superType("IdentifiableElement")»
				data.createConcreteType("Node", "core.Node", "info.scce.pyro.core");
				«"Node".superType("ModelElement")»
				data.createConcreteType("Edge", "core.Edge", "info.scce.pyro.core");
				«"Edge".superType("ModelElement")»
				data.createConcreteType("Container", "core.Container", "info.scce.pyro.core");
				«"Container".superType("Node")»
				«"Container".superType("ModelElementContainer")»
				data.createConcreteType("GraphModel", "core.GraphModel", "info.scce.pyro.core");
				«"GraphModel".superType("ModelElementContainer")»
				data.createConcreteType("BendingPoint", "core.BendingPoint", "info.scce.pyro.core");
				«"BendingPoint".superType("PyroElement")»
				//pyro cmd
				data.createConcreteType("Command", "core.Command", "info.scce.pyro.core.command");
				data.createConcreteType("CompoundCommand", "core.CompoundCommand", "info.scce.pyro.core.command");
				data.createConcreteType("NodeCommand", "core.NodeCommand", "info.scce.pyro.core.command");
				«"NodeCommand".superType("Command")»
				data.createConcreteType("EdgeCommand", "core.EdgeCommand", "info.scce.pyro.core.command");
				«"EdgeCommand".superType("Command")»
				data.createConcreteType("CreateNodeCommand", "core.CreateNodeCommand", "info.scce.pyro.core.command");
				«"CreateNodeCommand".superType("NodeCommand")»
				data.createConcreteType("MoveNodeCommand", "core.MoveNodeCommand", "info.scce.pyro.core.command");
				«"MoveNodeCommand".superType("NodeCommand")»
				data.createConcreteType("RemoveNodeCommand", "core.RemoveNodeCommand", "info.scce.pyro.core.command");
				«"RemoveNodeCommand".superType("NodeCommand")»
				data.createConcreteType("ResizeNodeCommand", "core.ResizeNodeCommand", "info.scce.pyro.core.command");
				«"ResizeNodeCommand".superType("NodeCommand")»
				data.createConcreteType("RotateNodeCommand", "core.RotateNodeCommand", "info.scce.pyro.core.command");
				«"RotateNodeCommand".superType("NodeCommand")»
				data.createConcreteType("CreateEdgeCommand", "core.CreateEdgeCommand", "info.scce.pyro.core.command");
				«"CreateEdgeCommand".superType("EdgeCommand")»
				data.createConcreteType("RemoveEdgeCommand", "core.RemoveEdgeCommand", "info.scce.pyro.core.command");
				«"RemoveEdgeCommand".superType("EdgeCommand")»
				data.createConcreteType("ReconnectEdgeCommand", "core.ReconnectEdgeCommand", "info.scce.pyro.core.command");
				«"ReconnectEdgeCommand".superType("EdgeCommand")»
				data.createConcreteType("UpdateBendPointCommand", "core.UpdateBendPointCommand", "info.scce.pyro.core.command");
				«"UpdateBendPointCommand".superType("EdgeCommand")»
				//pyro message
				data.createConcreteType("Message", "core.Message", "info.scce.pyro.core.message");
				
				data.createConcreteType("ProjectMessage", "core.ProjectMessage", "info.scce.pyro.core.message");
				«"ProjectMessage".superType("Message")»
				data.createConcreteType("GraphMessage", "core.GraphMessage", "info.scce.pyro.core.message");
				«"GraphMessage".superType("Message")»
				data.createConcreteType("PropertyMessage", "core.PropertyMessage", "info.scce.pyro.core.message");
				«"PropertyMessage".superType("Message")»
				data.createConcreteType("CompoundCommandMessage", "core.CompoundCommandMessage", "info.scce.pyro.core.message");
				«"CompoundCommandMessage".superType("Message")»
				//Attributes pyro core
				«"PyroFolder".singlePrimitiveAttribute("name","STRING")»
				«"PyroFolder".multiAttribute("innerFolders","PyroFolder")»
				«"PyroFolder".multiAttribute("graphModels","GraphModel")»
				«"PyroProject".singleAttribute("owner","PyroUser")»
				«"PyroProject".multiAttribute("shared","PyroUser")»
				«"PyroProject".singlePrimitiveAttribute("description","STRING")»
				«"PyroUser".singlePrimitiveAttribute("username","STRING")»
				«"PyroUser".singlePrimitiveAttribute("password","STRING")»
				«"PyroUser".singlePrimitiveAttribute("email","STRING")»
				«"PyroUser".multiAttribute("knownUsers","PyroUser")»
				«"PyroUser".multiAttribute("ownedProjects","PyroProject")»
				«"PyroUser".multiAttribute("sharedProjects","PyroProject")»
				//Attributes graphmodel ecore
				«"GraphModel".singlePrimitiveAttribute("filename","STRING")»
				«"GraphModel".singlePrimitiveAttribute("router","STRING")»
				«"GraphModel".singlePrimitiveAttribute("connector","STRING")»
				«"GraphModel".singlePrimitiveAttribute("width","LONG")»
				«"GraphModel".singlePrimitiveAttribute("height","LONG")»
				«"GraphModel".singlePrimitiveAttribute("scale","DOUBLE")»
				«"ModelElement".singleAttribute("container","ModelElementContainer")»
				«"ModelElementContainer".multiAttribute("modelElements","ModelElement")»
				«"Node".multiAttribute("incoming","Edge")»
				«"Node".multiAttribute("outgoing","Edge")»
				«"Node".singlePrimitiveAttribute("x","LONG")»
				«"Node".singlePrimitiveAttribute("y","LONG")»
				«"Node".singlePrimitiveAttribute("width","LONG")»
				«"Node".singlePrimitiveAttribute("height","LONG")»
				«"Node".singlePrimitiveAttribute("angle","LONG")»
				«"Edge".singleAttribute("targetElement","Node")»
				«"Edge".singleAttribute("sourceElement","Node")»
				«"Edge".multiAttribute("bendingPoints","BendingPoint")»
				«"BendingPoint".singlePrimitiveAttribute("x","LONG")»
				«"BendingPoint".singlePrimitiveAttribute("y","LONG")»
				//Attributes pyro cmd
				«"Command".singlePrimitiveAttribute("delegateId","LONG")»
				«"Command".singlePrimitiveAttribute("type","STRING")»
				«"CompoundCommand".multiAttribute("queue","Command")»
				«"CreateNodeCommand".singlePrimitiveAttribute("x","LONG")»
				«"CreateNodeCommand".singlePrimitiveAttribute("y","LONG")»
				«"CreateNodeCommand".singlePrimitiveAttribute("width","LONG")»
				«"CreateNodeCommand".singlePrimitiveAttribute("height","LONG")»
				«"CreateNodeCommand".singlePrimitiveAttribute("containerId","LONG")»
				
				«"RemoveNodeCommand".singlePrimitiveAttribute("x","LONG")»
				«"RemoveNodeCommand".singlePrimitiveAttribute("y","LONG")»
				«"RemoveNodeCommand".singlePrimitiveAttribute("width","LONG")»
				«"RemoveNodeCommand".singlePrimitiveAttribute("height","LONG")»
				«"RemoveNodeCommand".singlePrimitiveAttribute("containerId","LONG")»
				
				«"MoveNodeCommand".singlePrimitiveAttribute("x","LONG")»
				«"MoveNodeCommand".singlePrimitiveAttribute("y","LONG")»
				«"MoveNodeCommand".singlePrimitiveAttribute("oldX","LONG")»
				«"MoveNodeCommand".singlePrimitiveAttribute("oldY","LONG")»
				«"MoveNodeCommand".singlePrimitiveAttribute("oldContainerId","LONG")»
				«"MoveNodeCommand".singlePrimitiveAttribute("containerId","LONG")»
				
				«"ResizeNodeCommand".singlePrimitiveAttribute("width","LONG")»
				«"ResizeNodeCommand".singlePrimitiveAttribute("height","LONG")»
				«"ResizeNodeCommand".singlePrimitiveAttribute("oldWidth","LONG")»
				«"ResizeNodeCommand".singlePrimitiveAttribute("oldHeight","LONG")»
				«"ResizeNodeCommand".singlePrimitiveAttribute("direction","LONG")»
				
				«"CreateEdgeCommand".singlePrimitiveAttribute("sourceId","LONG")»
				«"CreateEdgeCommand".singlePrimitiveAttribute("targetId","LONG")»
				«"CreateEdgeCommand".multiAttribute("positions","BendingPoint")»
				
				«"RemoveEdgeCommand".singlePrimitiveAttribute("sourceId","LONG")»
				«"RemoveEdgeCommand".singlePrimitiveAttribute("targetId","LONG")»
				«"RemoveEdgeCommand".multiAttribute("positions","BendingPoint")»
				
				«"ReconnectEdgeCommand".singlePrimitiveAttribute("sourceId","LONG")»
				«"ReconnectEdgeCommand".singlePrimitiveAttribute("targetId","LONG")»
				«"ReconnectEdgeCommand".singlePrimitiveAttribute("oldSourceId","LONG")»
				«"ReconnectEdgeCommand".singlePrimitiveAttribute("oldTargetId","LONG")»
				
				«"UpdateBendPointCommand".multiAttribute("positions","BendingPoint")»
				«"UpdateBendPointCommand".multiAttribute("oldPositions","BendingPoint")»
				
				«"Message".singlePrimitiveAttribute("messageType","STRING")»
				«"Message".singlePrimitiveAttribute("senderDywaId","LONG")»
				
				«"GraphMessage".singlePrimitiveAttribute("graphModelId","LONG")»
				
				«"ProjectMessage".singleAttribute("project","PyroProject")»
				
				«"PropertyMessage".singleAttribute("delegate","IdentifiableElement")»
				
				«"CompoundCommandMessage".singleAttribute("cmd","CompoundCommand")»
				«"CompoundCommandMessage".singlePrimitiveAttribute("type","STRING")»

				final List<DataConnector> dataConnectors = new LinkedList<>();
				«FOR g: gc.graphMopdels»
					dataConnectors.add(new DataConnector«g.name.fuEscapeJava»(data));
				«ENDFOR»
				
				dataConnectors.stream().forEach(DataConnector::createTypes);
				dataConnectors.stream().forEach(DataConnector::configInheritance);
				dataConnectors.stream().forEach(DataConnector::createFields);
				
				data.cleanupDataModel();
				data.store();
			}
			
			private interface DataConnector {
				void createTypes();
				void configInheritance();
				void createFields();
			}
			
			«FOR g: gc.graphMopdels»
				«graphDataModel(g)»
			«ENDFOR»
		}
	
	'''
	def getDyWAType(Attribute attr,GraphModel g) '''PropertyType.«attr.innerDyWAType(g)»«IF attr.isList»_LIST«ENDIF»'''
	
	private def innerDyWAType(Attribute attr,GraphModel g) {
		if(attr.isPrimitive(g)&&getEnum(attr.type,g)==null){
			return attr.type.dyWALiteral
		}
		return "OBJECT"
	}
	
	def getDyWALiteral(String pType){
		switch pType {
			case "EBoolean": "BOOLEAN"
			case "EInt": "LONG"
			case "EDouble": "DOUBLE"
			case "EReal": "DOUBLE"
			case "EString": "STRING"
			case "EDate": "TIMESTAMP"
			case "EDateTime": "TIMESTAMP"
			case "EFile": "FILE"
		}
	}
	def singlePrimitiveAttribute(String typename,String attributename,String type) '''data.addPrimitiveField("core.«typename»", "core.«typename».«attributename»", "«attributename»", PropertyType.«type», true);'''
	def multiPrimitiveAttribute(String typename,String attributename,String type) '''data.addPrimitiveField("core.«typename»", "core.«typename».«attributename»", "«attributename»", PropertyType.«type»_LIST, true);'''
	
	
	def singleAttribute(String sourceType,String attributeName,String targetType) '''data.addComplexField("core.«sourceType»", "core.«sourceType».«attributeName»", "«attributeName»", PropertyType.OBJECT,"core.«targetType»",true);'''
	def multiAttribute(String sourceType,String attributeName,String targetType) '''data.addComplexField("core.«sourceType»", "core.«sourceType».«attributeName»", "«attributeName»", PropertyType.OBJECT_LIST,"core.«targetType»",true);'''
	
	def superType(String type,String superType)'''data.addSuperType("core.«type»", "core.«superType»");'''
	
	def graphDataModel(GraphModel g) '''
		private static class DataConnector«g.name.fuEscapeJava» implements DataConnector {
			private DyWADataHelper data;
			
			public DataConnector«g.name.fuEscapeJava»(DyWADataHelper data) {
				this.data = data;
			}
			
			@Override
			public void createTypes() {
				//graphmodel 
				data.createConcreteType("«g.name»", "«g.name».«g.name»", "«g.fqn»");
				//nodes, edges, types
				«FOR type: g.elementsAndTypes»
					data.createConcreteType("«type.name»", "«g.name».«type.name»", "«type.fqn»");
				«ENDFOR»
				//enumerations
				«FOR type: g.enumerations»
					data.createEnumType("«type.name»", "«g.name».«type.name»", "«type.fqn»",«type.literals.map['''"«it»"'''].join(",")»);
				«ENDFOR»
			}
			
			@Override
			public void configInheritance() {
				data.addSuperType("«g.name».«g.name»", "core.GraphModel");
				«FOR type: g.elementsAndTypes»
					// Add super types for '«type.name»'.
					// Add super type '«type.extending()»'. 
					data.addSuperType("«g.name».«type.name»", "«IF type.isExtending»«g.name»«ELSE»core«ENDIF».«type.extending()»");
				«ENDFOR»
			}
			
			@Override
			public void createFields() {
				«g.createAttributes(g)»
				«g.elementsAndTypes.map[createAttributes(g)].join("\n")»
				
				
				data.initializeProperties();
				data.migrateListToSingle();
				data.migrateSingleToList();
			}
			
		}
	'''
	
	def createAttributes(ModelElement type,GraphModel g)
	'''
	{
		// Add fields for '«type.name»'.
		«FOR attribute: type.attributes»
			«IF attribute.isPrimitive(g)&&getEnum(attribute.type,g)==null»
			data.addPrimitiveField("«g.name».«type.name»", "«g.name».«type.name».«attribute.name»", "«attribute.name»", «attribute.getDyWAType(g)», true);
			«ELSE»
			data.addComplexField("«g.name».«type.name»", "«g.name».«type.name».«attribute.name»", "«attribute.name»", «attribute.getDyWAType(g)»,"«g.name».«attribute.type»",true);
			«ENDIF»
		«ENDFOR»
	}
	'''
	
}