package de.jabc.cinco.meta.plugin.pyro.templates.message

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type
import mgl.GraphicalModelElement
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EPackage

class MoveMessageParser implements Templateable{
	
	override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums,ArrayList<GraphModel> graphModels,ArrayList<EPackage> ecores)
	'''
package de.ls5.cinco.pyro.message.«graphModel.name.toFirstLower»;

import de.ls5.cinco.pyro.transformation.api.«graphModel.name.toFirstLower».*;
import de.ls5.cinco.pyro.message.MessageParser;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import org.json.simple.parser.ParseException;

/**
 * Generated by Pyro CINCO Meta plugin
 */
public class MoveMessageParser {

    public static JSONObject moveElement(String jsonString,C«graphModel.name.toFirstUpper» c«graphModel.name.toFirstUpper»){
        JSONObject receivedMessage = MessageParser.parse(jsonString);
        JSONObject element = (JSONObject) receivedMessage.get("element");
        long elementId = 0;
        if(element.get("cinco_id") == null){
            return getMoveResponse(true,0,element);
        }
        elementId = Long.parseLong(""+element.get("cinco_id"));
        «FOR StyledEdge sn:edges»
        if(receivedMessage.get("name").equals("«sn.modelElement.name.toFirstUpper»")) {
			C«sn.modelElement.name.toFirstUpper» c«sn.modelElement.name.toFirstUpper» = c«graphModel.name.toFirstUpper».getC«sn.modelElement.name.toFirstUpper»(elementId);
            if(c«sn.modelElement.name.toFirstUpper» == null){
                return getMoveErrorResponse((JSONObject) receivedMessage.get("element"));
            }
            JSONArray vertices = (JSONArray) element.get("vertices");
            if(vertices != null) {
	            c«sn.modelElement.name.toFirstUpper».removeAllBendingPoints();
	            for(Object vertex:vertices){
	                double x = Double.parseDouble(""+((JSONObject) vertex).get("x"));
	                double y = Double.parseDouble(""+((JSONObject) vertex).get("y"));
	                c«sn.modelElement.name.toFirstUpper».addBendingPoint((long)x,(long)y);
	            }
            }
            return getMoveResponse(true,c«sn.modelElement.name.toFirstUpper».getModelElement().getId(),(JSONObject) receivedMessage.get("element"));
		}
        «ENDFOR»
        double x = Double.parseDouble(""+getPosition((JSONObject) receivedMessage.get("element")).get("x"));
        double y = Double.parseDouble(""+getPosition((JSONObject) receivedMessage.get("element")).get("y"));
		«FOR StyledNode sn:nodes»
		if(receivedMessage.get("name").equals("«sn.modelElement.name.toFirstUpper»")) {
		    C«sn.modelElement.name.toFirstUpper» c«sn.modelElement.name.toFirstUpper» = c«graphModel.name.toFirstUpper».getC«sn.modelElement.name.toFirstUpper»(elementId);
		    if(c«sn.modelElement.name.toFirstUpper» == null){
                return getMoveErrorResponse((JSONObject) receivedMessage.get("element"));
            }
		    c«sn.modelElement.name.toFirstUpper».moveTo((long)x,(long)y);
		    if(receivedMessage.get("parent") != null){
                JSONObject parent = (JSONObject) receivedMessage.get("parent");
                long parentId = Long.parseLong(""+parent.get("cinco_id"));
                «FOR EmbeddingConstraint ec:embeddingConstraints»
                	«FOR GraphicalModelElement gme: ec.validNode»
                		«IF gme.name.equals(sn.modelElement.name)»
                if(parent.get("cinco_name").equals("«ec.container.name.toFirstUpper»")) {
                    C«ec.container.name.toFirstUpper» cInner«ec.container.name.toFirstUpper» = c«graphModel.name.toFirstUpper».getC«ec.container.name.toFirstUpper»(parentId);
                    if(cInner«ec.container.name.toFirstUpper» != null){
                        c«sn.modelElement.name.toFirstUpper».setContainer(cInner«ec.container.name.toFirstUpper»);
                    }
                    else{
                        return getMoveErrorResponse((JSONObject) receivedMessage.get("element"));
                    }
                }
                		«ENDIF»
               		«ENDFOR»
                «ENDFOR»
            }
            else {
        		c«sn.modelElement.name.toFirstUpper».setContainer(c«graphModel.name.toFirstUpper»);
        	}
		    return getMoveResponse(true,c«sn.modelElement.name.toFirstUpper».getModelElement().getId(),(JSONObject) receivedMessage.get("element"));
		}
        «ENDFOR»
        return getMoveErrorResponse((JSONObject) receivedMessage.get("element"));
    }
    
    private static JSONObject getPosition(JSONObject element) {
        return (JSONObject) element.get("position");
    }

    private static JSONObject getResponse() {
        JSONObject response = new JSONObject();
        return response;
    }

    private static JSONObject getMoveResponse(boolean valid,long id,JSONObject element) {
        JSONObject response = getResponse();
        response.put("valid",valid);
        response.put("dywaId",id);
        response.put("muId",(String) element.get("id"));
        return response;
    }

    private static JSONObject getMoveErrorResponse(JSONObject element) {
        JSONObject response = getResponse();
        response.put("valid",false);
        response.put("muId",(String) element.get("id"));
        return response;
    }
}
	
	'''
	
}