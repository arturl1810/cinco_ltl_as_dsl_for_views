package de.jabc.cinco.meta.plugin.pyro.templates.presentation.java.components.menu

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type

class Menu implements Templateable{
	
	override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums)
	'''
	package de.mtf.dywa.components.menubar;

import de.ls5.dywa.generated.controller.«graphModel.name.toFirstUpper»Controller;
import de.ls5.dywa.generated.controller.ProjectController;
import de.ls5.dywa.generated.entity.«graphModel.name.toFirstUpper»;
import de.ls5.dywa.generated.entity.Project;
import org.apache.tapestry5.ComponentResources;
import org.apache.tapestry5.SymbolConstants;
import org.apache.tapestry5.annotations.Parameter;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.ioc.annotations.Symbol;
import org.apache.tapestry5.services.Request;
import org.apache.tapestry5.util.TextStreamResponse;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by Pyro CINCO Meta Plugin
 */
public class Menu {

    @Property
    @Inject
    @Symbol(SymbolConstants.TAPESTRY_VERSION)
    private String tapestryVersion;

    @Inject
    private ProjectController projectController;

    @Inject
    private «graphModel.name.toFirstUpper»Controller «graphModel.name.toFirstLower»Controller;

    @Property
    @Parameter(allowNull = false)
    private Project openedProject;

    @Property
    private Project iteratedProject;

    @Property
    @Parameter
    private «graphModel.name.toFirstUpper» openedGraphModel;

    @Property
    private «graphModel.name.toFirstUpper» iteratedGraphModel;

    @Property
    private List<Project> projectList;

    public void setupRender() {
        if(this.openedProject != null){
            if(this.openedGraphModel == null) {
                if(isGraphContained()) {
                    this.openedGraphModel = («graphModel.name.toFirstUpper») this.openedProject.getgraphModels_GraphModel().get(0);
                }
            }
        }
        this.projectList = new ArrayList<Project>(this.projectController.fetchProject());
    }

    public boolean isGraphContained() {
        return !openedProject.getgraphModels_GraphModel().isEmpty();
    }

    public boolean isProjectLoaded() {
        return openedProject != null;
    }

    public boolean isGraphLoaded() {
        return openedGraphModel != null;
    }

    public String getNewBtnCss() {
        return "";
    }

    public String getOpenBtnCss() {
        return "";
    }

    public String getRemoveBtnCss() {
        return "";
    }

    public String getEditBtnCss() {
        return "";
    }

}
	
	'''
	
}