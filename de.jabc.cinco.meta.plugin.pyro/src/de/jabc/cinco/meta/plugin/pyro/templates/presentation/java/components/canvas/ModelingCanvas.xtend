package de.jabc.cinco.meta.plugin.pyro.templates.presentation.java.components.canvas

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type

class ModelingCanvas implements Templateable{
	
	override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums)
	'''
package de.mtf.dywa.components.canvas;

import de.ls5.cinco.parser.«graphModel.name.toFirstUpper»Parser;
import de.ls5.cinco.message.*;
import de.ls5.cinco.transformation.api.C«graphModel.name.toFirstUpper»Wrapper;
import de.ls5.dywa.generated.controller.«graphModel.name.toFirstUpper»Controller;
import de.ls5.dywa.generated.controller.ProjectController;
import de.ls5.dywa.generated.entity.«graphModel.name.toFirstUpper»;
import de.ls5.dywa.generated.entity.Project;
import de.mtf.dywa.pages.Pyro;
import org.apache.tapestry5.ComponentResources;
import org.apache.tapestry5.annotations.InjectPage;
import org.apache.tapestry5.annotations.Parameter;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.ioc.Messages;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.Request;
import org.apache.tapestry5.util.TextStreamResponse;

import java.util.List;

/**
 * Generated by Pyro CINCO Meta Plugin
 */
public class ModelingCanvas {

    @Inject
    private ProjectController projectController;
    
    @Inject
    private «graphModel.name.toFirstUpper»Controller «graphModel.name.toFirstLower»Controller;

    @Inject
    private C«graphModel.name.toFirstUpper»Wrapper c«graphModel.name.toFirstUpper»Wrapper;


    @Parameter(required = true, allowNull = false)
    @Property
    private Project openProject;

    @Parameter(required = true, allowNull = false)
    @Property
    private «graphModel.name.toFirstUpper» openGraph;

    @Inject
    private Messages messages;

    @InjectPage
    private Pyro pyroPage;

    @Inject
    private Request request;

    @Inject
    private ComponentResources componentResources;

    public String getInitialJSModel() {
        return «graphModel.name.toFirstUpper»Parser.toJSONString(c«graphModel.name.toFirstUpper»Wrapper.wrap«graphModel.name.toFirstUpper»(this.openGraph));
    }
    
    public String getCustomActions() {
        return «graphModel.name.toFirstUpper»Parser.getCustomeActionsJSON();
    }

    public String getEditElement()
    {
        return this.componentResources.createFormEventLink("editElement",this.openGraph.getId()).toURI();
    }

    Object onEditElement(long graphId) {
        this.openGraph = this.«graphModel.name.toFirstLower»Controller.read«graphModel.name.toFirstUpper»(graphId);
        List<String> requestAttributes = request.getParameterNames();
        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
        return new TextStreamResponse("text/html", EditMessageParser.editElement(jsonString, c«graphModel.name.toFirstUpper»Wrapper.wrap«graphModel.name.toFirstUpper»(this.openGraph)).toJSONString());
 	
    }

    public String getCreateElement()
    {
        return this.componentResources.createFormEventLink("createElement",this.openGraph.getId()).toURI();
    }

    Object onCreateElement(long graphId)
    {
        this.openGraph = this.«graphModel.name.toFirstLower»Controller.read«graphModel.name.toFirstUpper»(graphId);
        List<String> requestAttributes = request.getParameterNames();
        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
        return new TextStreamResponse("text/html", CreateMessageParser.createElement(jsonString, c«graphModel.name.toFirstUpper»Wrapper.wrap«graphModel.name.toFirstUpper»(this.openGraph)).toJSONString());
 	}

    public String getRemoveElement()
    {
        return this.componentResources.createFormEventLink("removeElement",this.openGraph.getId()).toURI();
    }

    Object onRemoveElement(long graphId)
    {
        this.openGraph = this.«graphModel.name.toFirstLower»Controller.read«graphModel.name.toFirstUpper»(graphId);
        List<String> requestAttributes = request.getParameterNames();
        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
        return new TextStreamResponse("text/html", RemoveMessageParser.removeElement(jsonString, c«graphModel.name.toFirstUpper»Wrapper.wrap«graphModel.name.toFirstUpper»(this.openGraph)).toJSONString());
    }
    
    public String getChangeSettings()
    {
        return this.componentResources.createFormEventLink("changeSettings",this.openGraph.getId()).toURI();
    }

    Object onChangeSettings(long graphId)
    {
        this.openGraph = this.«graphModel.name.toFirstLower»Controller.read«graphModel.name.toFirstUpper»(graphId);
        List<String> requestAttributes = request.getParameterNames();
        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
        return new TextStreamResponse("text/html", SettingsMessageParser.changeSettings(jsonString, c«graphModel.name.toFirstUpper»Wrapper.wrap«graphModel.name.toFirstUpper»(this.openGraph)).toJSONString());
    }
    
    public String getCustomFeature()
    {
        return this.componentResources.createFormEventLink("customFeature",this.openGraph.getId()).toURI();
    }

    Object onCustomFeature(long graphId)
    {
        this.openGraph = this.«graphModel.name.toFirstLower»Controller.read«graphModel.name.toFirstUpper»(graphId);
        List<String> requestAttributes = request.getParameterNames();
        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
        return new TextStreamResponse("text/html", CustomFeatureParser.customFeature(jsonString, c«graphModel.name.toFirstUpper»Wrapper.wrap«graphModel.name.toFirstUpper»(this.openGraph)).toJSONString());
    }
    
    public String getEdgeStyleModeRouter(){
        if(openGraph.getedgeStyleModeRouter() == null){
            return "";
        }
        else return openGraph.getedgeStyleModeRouter();
    }

    public boolean getIsGraphMinimized(){
        if(this.openGraph != null){
            return this.openGraph.getminimizedGraph();
        }
        return true;
    }

    public boolean getIsMenuMinimized(){
        if(this.openGraph != null){
            return this.openGraph.getminimizedMenu();
        }
        return false;
    }

    public boolean getIsMapMinimized(){
        if(this.openGraph != null){
            return this.openGraph.getminimizedMap();
        }
        return false;
    }
}
	
	'''
	
}