package de.jabc.cinco.meta.plugin.pyro.templates.presentation.java.components.canvas

import de.jabc.cinco.meta.plugin.pyro.model.TemplateContainer
import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel

class ModelingCanvas implements Templateable{
	
	override create(TemplateContainer tc)
	'''
		package de.ls5.cinco.pyro.components.canvas;
		
		«FOR GraphModel g:tc.graphModels»
		import de.ls5.cinco.pyro.message.«g.name.toFirstLower».*;
		import de.ls5.cinco.pyro.transformation.api.«g.name.toFirstLower».*;
		import de.ls5.cinco.pyro.parser.«g.name.toFirstLower».*;
		«ENDFOR»
		import de.ls5.dywa.generated.controller.*;
		import de.ls5.dywa.generated.entity.*;
		import de.ls5.cinco.pyro.pages.Pyro;
		import org.apache.tapestry5.ComponentResources;
		import org.apache.tapestry5.annotations.InjectPage;
		import org.apache.tapestry5.annotations.Parameter;
		import org.apache.tapestry5.annotations.Property;
		import org.apache.tapestry5.ioc.Messages;
		import org.apache.tapestry5.ioc.annotations.Inject;
		import org.apache.tapestry5.services.Request;
		import org.apache.tapestry5.util.TextStreamResponse;
		
		import java.util.List;
		
		/**
		 * Generated by Pyro CINCO Meta Plugin
		 */
		public class ModelingCanvas {
		
		    @Inject
		    private ProjectController projectController;
		    «FOR GraphModel g:tc.graphModels»
		    @Inject
		    private «g.name.toFirstUpper»Controller «g.name.toFirstLower»Controller;
		
		    @Inject
		    private C«g.name.toFirstUpper»Wrapper c«g.name.toFirstUpper»Wrapper;
			«ENDFOR»
		
		    @Parameter(required = true, allowNull = false)
		    @Property
		    private Project openProject;
		
		    @Parameter(required = true, allowNull = false)
		    @Property
		    private GraphModel openGraph;
		
		    @Inject
		    private Messages messages;
		
		    @InjectPage
		    private Pyro pyroPage;
		
		    @Inject
		    private Request request;
		
		    @Inject
		    private ComponentResources componentResources;
		
		    public String getInitialJSModel() {
		    	«FOR GraphModel g:tc.graphModels»
				if(this.openGraph instanceof «g.name.toFirstUpper») {
		        	return «g.name.toFirstUpper»Parser.toJSONString(c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph));
		        }
		    	«ENDFOR»
		    	return null;
		    }
		    
		    public String getCustomActions() {
		    	«FOR GraphModel g:tc.graphModels»
				if(this.openGraph instanceof «g.name.toFirstUpper») {
		        	return «g.name.toFirstUpper»Parser.getCustomeActionsJSON();
		    	}
		    	«ENDFOR»
		    	return null;
		    }
		
		    public String getEditElement()
		    {
		        return this.componentResources.createFormEventLink("editElement",this.openGraph.getId()).toURI();
		    }
		    
		    public String getPrimeReferences() {
		    	«FOR GraphModel g:tc.graphModels»
		    	if(this.openGraph instanceof «g.name.toFirstUpper») {
		        	return «g.name.toFirstUpper»Parser.getPrimeReferencesJSON(c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph));
		        }
		        «ENDFOR»
		        return null;
		    }
		
		    Object onEditElement(long graphId) {
		    	«FOR GraphModel g:tc.graphModels»
		        this.openGraph = this.«g.name.toFirstLower»Controller.read«g.name.toFirstUpper»(graphId);
		        if(this.openGraph != null) {
		        	List<String> requestAttributes = request.getParameterNames();
		        	String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
		        	return new TextStreamResponse("text/html", EditMessageParser.editElement(jsonString, c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph)).toJSONString());
		    	}
		        «ENDFOR»
		        
		        return null;
		 	
		    }
		
		    public String getCreateElement()
		    {
		        return this.componentResources.createFormEventLink("createElement",this.openGraph.getId()).toURI();
		    }
		
		    Object onCreateElement(long graphId)
		    {
		    	«FOR GraphModel g:tc.graphModels»
			        this.openGraph = this.«g.name.toFirstLower»Controller.read«g.name.toFirstUpper»(graphId);
			        if(this.openGraph != null) {
				        List<String> requestAttributes = request.getParameterNames();
				        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
				        return new TextStreamResponse("text/html", CreateMessageParser.createElement(jsonString, c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph)).toJSONString());
			        }
		        «ENDFOR»
		        return null;
		 	}
		
		    public String getRemoveElement()
		    {
		        return this.componentResources.createFormEventLink("removeElement",this.openGraph.getId()).toURI();
		    }
		
		    Object onRemoveElement(long graphId)
		    {
		    	«FOR GraphModel g:tc.graphModels»
			        this.openGraph = this.«g.name.toFirstLower»Controller.read«g.name.toFirstUpper»(graphId);
			        if(this.openGraph != null) {
				        List<String> requestAttributes = request.getParameterNames();
				        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
				        return new TextStreamResponse("text/html", RemoveMessageParser.removeElement(jsonString, c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph)).toJSONString());
			        }
		        «ENDFOR»
		        return null;
		    }
		    
		    public String getChangeSettings()
		    {
		        return this.componentResources.createFormEventLink("changeSettings",this.openGraph.getId()).toURI();
		    }
		
		    Object onChangeSettings(long graphId)
		    {
		    	«FOR GraphModel g:tc.graphModels»
			        this.openGraph = this.«g.name.toFirstLower»Controller.read«g.name.toFirstUpper»(graphId);
			        if(this.openGraph != null) {
				        List<String> requestAttributes = request.getParameterNames();
				        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
				        return new TextStreamResponse("text/html", SettingsMessageParser.changeSettings(jsonString, c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph)).toJSONString());
			        }
		        «ENDFOR»
		        return null;
		    }
		    
		    public String getCustomFeature()
		    {
		        return this.componentResources.createFormEventLink("customFeature",this.openGraph.getId()).toURI();
		    }
		
		    Object onCustomFeature(long graphId)
		    {
		    	«FOR GraphModel g:tc.graphModels»
			        this.openGraph = this.«g.name.toFirstLower»Controller.read«g.name.toFirstUpper»(graphId);
			        if(this.openGraph != null) {
				        List<String> requestAttributes = request.getParameterNames();
				        String jsonString = requestAttributes.toString().substring(1,requestAttributes.toString().length()-1);
				        return new TextStreamResponse("text/html", CustomFeatureParser.customFeature(jsonString, c«g.name.toFirstUpper»Wrapper.wrap«g.name.toFirstUpper»((«g.name.toFirstUpper»)this.openGraph)).toJSONString());
				     }
		        «ENDFOR»
		        return null;
		    }
		    
		    public String getEdgeStyleModeRouter(){
		        if(openGraph.getedgeStyleModeRouter() == null){
		            return "";
		        }
		        else return openGraph.getedgeStyleModeRouter();
		    }
		
		    public boolean getIsGraphMinimized(){
		        if(this.openGraph != null){
		            return this.openGraph.getminimizedGraph();
		        }
		        return true;
		    }
		
		    public boolean getIsMenuMinimized(){
		        if(this.openGraph != null){
		            return this.openGraph.getminimizedMenu();
		        }
		        return false;
		    }
		
		    public boolean getIsMapMinimized(){
		        if(this.openGraph != null){
		            return this.openGraph.getminimizedMap();
		        }
		        return false;
		    }
		    
		    public String getGraphModelTypeName() {
		    	«FOR GraphModel g:tc.graphModels»
			    	if(this.openGraph instanceof «g.name.toFirstUpper») {
			    		return "«g.name.toFirstLower»";
			    		}
		        «ENDFOR»
		        return null;
		    }
		}
	'''
}