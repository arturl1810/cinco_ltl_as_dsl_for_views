package de.jabc.cinco.meta.plugin.pyro.templates.deployment

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type
import mgl.Attribute
import mgl.GraphicalModelElement
import java.util.List
import mgl.Node

class CincoDBController implements Templateable{

override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums)
'''
package de.ls5.cinco.deployment;

import de.ls5.dywa.api.ObjectController;
import de.ls5.dywa.api.TypeController;
import de.ls5.dywa.api.query.AbstractQuery;
import de.ls5.dywa.api.query.DeleteQuery;
import de.ls5.dywa.entities.object.DBField;
import de.ls5.dywa.entities.object.DBType;
import de.ls5.dywa.entities.property.PropertyType;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;

/**
 * Generated by Pyro CINCO-Meta-Plugin
 */
@Named("cincoDBController")
@RequestScoped
public class CincoDBControllerImpl implements CincoDBController{

    @Inject
	private TypeController typeController;

    @Inject
    private ObjectController objctrl;

    @Override
    public void createGraphModelDBTypes() {
        //Create GraphModel DBTypes
        System.out.print("Remove all DBTypes from Database");
        removeGraphModelDBTypes();
        System.out.println("[ok]");
        System.out.print("Creating abstract DBTypes for the Graphmodel");
        //Create IdentifiableElement
        final DBType identifiableElement = this.typeController.createType("IdentifiableElement");
        identifiableElement.setAbstractType(false);
        //System.out.println(identifiableElement.getName() + " created");

        //Create ModelElement and Model ElementContainer
        final DBType modelElement = this.typeController.createType("ModelElement");
        final DBType modelElementContainer = this.typeController.createType("ModelElementContainer");
        modelElement.setAbstractType(false);
        this.typeController.addSuperType(modelElement,identifiableElement);
        this.typeController.addComplexFieldToType(modelElement, "container", PropertyType.OBJECT, modelElementContainer);
        //System.out.println(modelElement.getName() + " created");

        modelElementContainer.setAbstractType(false);
        this.typeController.addSuperType(modelElementContainer,identifiableElement);
        this.typeController.addComplexFieldToType(modelElementContainer, "modelElements", PropertyType.OBJECT_LIST, modelElement);
        //System.out.println(modelElementContainer.getName() + " created");

        //Create GraphModel
        final DBType graphModel = this.typeController.createType("GraphModel");
        this.typeController.addPrimitiveFieldToType(graphModel,"theme",PropertyType.STRING);
        this.typeController.addPrimitiveFieldToType(graphModel,"edgeStyleModeConnector",PropertyType.STRING);
        this.typeController.addPrimitiveFieldToType(graphModel,"edgeStyleModeRouter",PropertyType.STRING);
        this.typeController.addPrimitiveFieldToType(graphModel,"scaleFactor",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"edgeTriggerWidth",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"snapRadius",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"paperWidth",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"paperHeight",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"gridSize",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"resizeStep",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"rotateStep",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"minimizedMenu",PropertyType.BOOLEAN);
        this.typeController.addPrimitiveFieldToType(graphModel,"minimizedGraph",PropertyType.BOOLEAN);
        this.typeController.addPrimitiveFieldToType(graphModel,"minimizedMap",PropertyType.BOOLEAN);
        graphModel.setAbstractType(false);
        this.typeController.addSuperType(graphModel,modelElementContainer);
        //System.out.println(graphModel.getName() + " created");

        //Create Point
        final DBType point = this.typeController.createType("Point");
        graphModel.setAbstractType(false);
        this.typeController.addPrimitiveFieldToType(point, "x", PropertyType.LONG);
        this.typeController.addPrimitiveFieldToType(point,"y",PropertyType.LONG);
        //System.out.println(point.getName() + " created");

        //Create Node and Edge
        final DBType node = this.typeController.createType("Node");
        final DBType edge = this.typeController.createType("Edge");
        node.setAbstractType(false);
        edge.setAbstractType(false);
        this.typeController.addSuperType(node, modelElement);
        this.typeController.addPrimitiveFieldToType(node,"width",PropertyType.LONG);
        this.typeController.addPrimitiveFieldToType(node,"height",PropertyType.LONG);
        this.typeController.addComplexFieldToType(node, "position", PropertyType.OBJECT, point);
        this.typeController.addComplexFieldToType(node, "incoming", PropertyType.OBJECT_LIST, edge);
        this.typeController.addComplexFieldToType(node,"outgoing",PropertyType.OBJECT_LIST,edge);
        this.typeController.addPrimitiveFieldToType(node,"angle",PropertyType.DOUBLE);
        //System.out.println(node.getName() + " created");

        this.typeController.addSuperType(edge,modelElement);
        this.typeController.addComplexFieldToType(edge, "sourceElement", PropertyType.OBJECT, node);
        this.typeController.addComplexFieldToType(edge,"targetElement",PropertyType.OBJECT,node);
        this.typeController.addComplexFieldToType(edge,"bendingPoints",PropertyType.OBJECT_LIST,point);
        //System.out.println(edge.getName() + " created");

        //Create Container
        final DBType container = this.typeController.createType("Container");
        container.setAbstractType(false);
        this.typeController.addSuperType(container, node);
        this.typeController.addSuperType(container,modelElementContainer);
        //System.out.println(container.getName() + " created");
        System.out.println("[ok]");

        //Create the CommandStack
        final DBType pyroCommand = this.typeController.createType("PyroCommand");
        pyroCommand.setAbstractType(false);
        DBField dywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroCommand, "dywaId", PropertyType.LONG);
        DBField typeDbField = this.typeController.addPrimitiveFieldToType(pyroCommand, "type", PropertyType.STRING);
        DBField timeDbField = this.typeController.addPrimitiveFieldToType(pyroCommand, "time", PropertyType.TIMESTAMP);
        //Create Node Command
        final DBType pyroCreateNodeCommand = this.typeController.createType("PyroCreateNodeCommand");
        this.typeController.addSuperType(pyroCreateNodeCommand,pyroCommand);
        DBField xDbField = this.typeController.addPrimitiveFieldToType(pyroCreateNodeCommand, "x", PropertyType.DOUBLE);
        DBField yDbField = this.typeController.addPrimitiveFieldToType(pyroCreateNodeCommand, "y", PropertyType.DOUBLE);
        //Move Node Command
        final DBType pyroMoveNodeCommand = this.typeController.createType("PyroMoveNodeCommand");
        this.typeController.addSuperType(pyroMoveNodeCommand,pyroCreateNodeCommand);
        DBField preXDbField = this.typeController.addPrimitiveFieldToType(pyroMoveNodeCommand, "preX", PropertyType.DOUBLE);
        DBField preYDbField = this.typeController.addPrimitiveFieldToType(pyroMoveNodeCommand, "preY", PropertyType.DOUBLE);
        //Resize Node Command
        final DBType pyroResizeNodeCommand = this.typeController.createType("PyroResizeNodeCommand");
        this.typeController.addSuperType(pyroResizeNodeCommand,pyroCommand);
        DBField heightDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "height", PropertyType.DOUBLE);
        DBField widthDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "width", PropertyType.DOUBLE);
        DBField preHeightDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "preHeight", PropertyType.DOUBLE);
        DBField preWidthDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "preWidth", PropertyType.DOUBLE);
        //Rotate Node Command
        final DBType pyroRotateNodeCommand = this.typeController.createType("PyroRotateNodeCommand");
        this.typeController.addSuperType(pyroRotateNodeCommand,pyroCommand);
        DBField angleDbField = this.typeController.addPrimitiveFieldToType(pyroRotateNodeCommand, "angle", PropertyType.DOUBLE);
        DBField preAngleDbField = this.typeController.addPrimitiveFieldToType(pyroRotateNodeCommand, "preAngle", PropertyType.DOUBLE);
        //Create Edge Command
        final DBType pyroCreateEdgeCommand = this.typeController.createType("PyroCreateEdgeCommand");
        this.typeController.addSuperType(pyroCreateEdgeCommand,pyroCommand);
        DBField sourceDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroCreateEdgeCommand, "sourceDywaId", PropertyType.LONG);
        DBField targetDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroCreateEdgeCommand, "targetDywaId", PropertyType.LONG);
        //Reconnect Edge Command
        final DBType pyroReconnectEdgeCommand = this.typeController.createType("PyroReconnectEdgeCommand");
        this.typeController.addSuperType(pyroReconnectEdgeCommand,pyroCreateEdgeCommand);
        DBField preSourceDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroReconnectEdgeCommand, "preSourceDywaId", PropertyType.LONG);
        DBField preTargetDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroReconnectEdgeCommand, "preTargetDywaId", PropertyType.LONG);
        //Vertex Edge Command
        final DBType pyroVertexEdgeCommand = this.typeController.createType("PyroVertexEdgeCommand");
        this.typeController.addSuperType(pyroVertexEdgeCommand,pyroCommand);
        DBField vertexesDbField = this.typeController.addComplexFieldToType(pyroVertexEdgeCommand, "vertexes", PropertyType.OBJECT_LIST,point);
        DBField preVertexesDbField = this.typeController.addComplexFieldToType(pyroVertexEdgeCommand, "preVertexes", PropertyType.OBJECT_LIST,point);
        //Graphmodel Attributes Command
        «FOR Attribute attr : graphModel.attributes»
	    	«createCommandAttribute(attr,enums,graphModel.name)»
	    «ENDFOR»
        //Node Attributes Commands
        «FOR StyledNode node: nodes»
			«IF node.modelElement instanceof Node»
				«createAttributeCommmand(node.modelElement,enums)»
			«ELSE»
				«createAttributeCommmand(node.modelElement,enums)»
			«ENDIF»
		«ENDFOR»
		//Edge Attributes Commands
		«FOR StyledEdge edge: edges»
		«createAttributeCommmand(edge.modelElement,enums)»
		«ENDFOR»


        DBField pyroCommandStackDbField = this.typeController.addComplexFieldToType(graphModel, "pyroCommandStack", PropertyType.OBJECT_LIST, pyroCommand);
        DBField pyroCommandStackIndexDbField = this.typeController.addPrimitiveFieldToType(graphModel, "pyroCommandStackIndex", PropertyType.LONG);
        
        createModelEnvironment(graphModel,node,edge,container);
        createProjectEnvironment(graphModel);
    }

    private void createProjectEnvironment(DBType graphModel){
        System.out.print("Creating DBTypes for the Project and User");
        //Create IdentifiableElement
        final DBType user = this.typeController.createType("User");
        final DBType project = this.typeController.createType("Project");

        user.setAbstractType(false);
        this.typeController.addPrimitiveFieldToType(user,"userName",PropertyType.STRING);
        this.typeController.addComplexFieldToType(user, "projects", PropertyType.OBJECT_LIST, project);
        this.typeController.addPrimitiveFieldToType(project,"edited",PropertyType.TIMESTAMP);
        this.typeController.addPrimitiveFieldToType(project,"created",PropertyType.TIMESTAMP);

        project.setAbstractType(false);
        this.typeController.addPrimitiveFieldToType(project,"projectName",PropertyType.STRING);
        this.typeController.addComplexFieldToType(project, "users", PropertyType.OBJECT_LIST, user);
        this.typeController.addComplexFieldToType(project, "graphModels", PropertyType.OBJECT_LIST, graphModel);
    }

    private void createModelEnvironment(DBType graphModel,DBType node, DBType edge, DBType container){
        //Create «graphModel.name»
        final DBType «graphModel.name.toFirstLower» = this.typeController.createType("«graphModel.name.toFirstUpper»");
        «graphModel.name.toFirstLower».setAbstractType(false);
        «graphModel.name.toFirstLower».setShortDescription("«graphModel.name.toFirstLower»");
        this.typeController.addSuperType(«graphModel.name.toFirstLower», graphModel);
        «FOR Attribute attr : graphModel.attributes»
	    	«createAttribute(attr,enums,graphModel.name)»
	    «ENDFOR»
        System.out.println(«graphModel.name.toFirstLower».getName() + " created");

        //Create Node-Types and Container-Types

        «FOR StyledNode node: nodes»
			«IF node.modelElement instanceof Node»
				«createNode(node.modelElement,enums)»
			«ELSE»
				«createContainer(node.modelElement,enums)»
			«ENDIF»
		«ENDFOR»

        //Create Edge-Types

        «FOR StyledEdge edge: edges»
		«createEdge(edge.modelElement,enums)»
		«ENDFOR»
        
        System.out.println("[ok]");
        
        
    }

    @Override
	public void removeGraphModelDBTypes() {
		final Set<DBType> types = this.typeController.getAllTypes(DeleteQuery.BOTH, AbstractQuery.BOTH);
		final List<DBType> sortedTypes = new ArrayList<>(types.size());

		final Comparator<DBType> comp = new Comparator<DBType>() {
			@Override
			public int compare(DBType o1, DBType o2) {
				if (o1.isSubTypeOf(o2)) {
					return -1;
				}
				if (o2.isSubTypeOf(o1)) {
					return 1;
				}
				return 0;
			}
		};

		final int size = types.size();
		for (int i = 0; i < size; i++) {
			final DBType min = Collections.min(types, comp);
			sortedTypes.add(min);
			types.remove(min);
		}

		for (final DBType t : sortedTypes) {
			for (final DBType st : new ArrayList<>(t.getSuperTypes())) {
				this.typeController.removeSuperType(t, st);
			}
		}

		for (final DBType t : sortedTypes) {
			for (final DBField f : new ArrayList<>(t.getFields())) {
				this.typeController.deleteTypeProperty(t, f);
			}
		}

		for (final DBType t : sortedTypes) {
			this.typeController.deleteTypeWithObjects(t);
		}
	}

}

'''

def createNode(GraphicalModelElement element,ArrayList<Type> enums)
'''
	//Create «element.name.toFirstUpper»
	final DBType «element.name.toFirstLower» = this.typeController.createType("«element.name.toFirstUpper»");
	«element.name.toFirstLower».setAbstractType(false);
	this.typeController.addSuperType(«element.name.toFirstLower», node);
	«createAttributes(element,enums)»
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createAttributeCommmand(GraphicalModelElement element,ArrayList<Type> enums)
'''
	//Attribute «element.name.toFirstUpper» Commnad
	final DBType pyro«element.name.toFirstUpper»AttributeCommand = this.typeController.createType("Pyro«element.name.toFirstUpper»AttributeCommand");
	pyro«element.name.toFirstUpper»AttributeCommand.setAbstractType(false);
	this.typeController.addSuperType(pyro«element.name.toFirstUpper»AttributeCommand, pyroCommand);
	«createCommandAttributes(element,enums)»
'''
def createEdge(GraphicalModelElement element,ArrayList<Type> enums)
'''
	//Create «element.name.toFirstUpper»
	final DBType «element.name.toFirstLower» = this.typeController.createType("«element.name.toFirstUpper»");
	«element.name.toFirstLower».setAbstractType(false);
	this.typeController.addSuperType(«element.name.toFirstLower», edge);
	«createAttributes(element,enums)»
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createContainer(GraphicalModelElement element,ArrayList<Type> enums)
'''
	//Create «element.name.toFirstUpper»
	final DBType «element.name.toFirstLower» = this.typeController.createType("«element.name.toFirstUpper»");
	«element.name.toFirstLower».setAbstractType(false);
	this.typeController.addSuperType(«element.name.toFirstLower», container);
	«createAttributes(element,enums)»
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createAttributes(GraphicalModelElement modelElement,ArrayList<Type> enums)
'''
	«IF !modelElement.attributes.empty»
	«FOR Attribute attr : modelElement.attributes»
        «createAttribute(attr,enums,modelElement.name)»
    «ENDFOR»
    «ENDIF»
'''
def createCommandAttributes(GraphicalModelElement modelElement,ArrayList<Type> enums)
'''
	«IF !modelElement.attributes.empty»
	«FOR Attribute attr : modelElement.attributes»
        «createCommandAttribute(attr,enums,modelElement.name)»
    «ENDFOR»
    «ENDIF»
'''
def createAttribute(Attribute attr,ArrayList<Type> enums,String elementName)
'''
	«IF attr.upperBound == 1 && (attr.lowerBound == 0 || attr.lowerBound == 1) »
	«createPrimativeAttribute(attr,elementName,enums)»
	«ELSE»
	«createListAttribute(attr,enums,elementName)»
	«ENDIF»
	
'''
def createCommandAttribute(Attribute attr,ArrayList<Type> enums,String elementName)
'''
	«IF attr.upperBound == 1 && (attr.lowerBound == 0 || attr.lowerBound == 1) »
	«createPrimativeCommandAttribute(attr,elementName,enums)»
	«ELSE»
	«createListCommandAttribute(attr,enums,elementName)»
	«ENDIF»
	
'''

def createListAttribute(Attribute attr,ArrayList<Type> enums, String elementName)
'''
	this.typeController.addPrimitiveFieldToType(«elementName.toFirstLower»,"«attr.name.toFirstLower»",PropertyType.STRING_LIST);
'''
def createListCommandAttribute(Attribute attr,ArrayList<Type> enums, String elementName)
'''
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"«attr.name.toFirstLower»",PropertyType.STRING_LIST);
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"pre«attr.name.toFirstUpper»",PropertyType.STRING_LIST);
'''

def createPrimativeAttribute(Attribute attribute,String elementName,List<Type> enums)
'''
	this.typeController.addPrimitiveFieldToType(«elementName.toFirstLower»,"«attribute.name.toFirstLower»",«getAttributeType(attribute.type)»);
''' 
def createPrimativeCommandAttribute(Attribute attribute,String elementName,List<Type> enums)
'''
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"«attribute.name.toFirstLower»",«getAttributeType(attribute.type)»);
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"pre«attribute.name.toFirstUpper»",«getAttributeType(attribute.type)»);
''' 

def getAttributeType(String type) {
	if(type.equals("EString")) return "PropertyType.STRING";
	if(type.equals("EInt")) return "PropertyType.LONG";
	if(type.equals("EDouble")) return "PropertyType.DOUBLE";
	if(type.equals("EBoolean")) return "PropertyType.BOOLEAN";
	//ENUM
	return "PropertyType.STRING";
}

}