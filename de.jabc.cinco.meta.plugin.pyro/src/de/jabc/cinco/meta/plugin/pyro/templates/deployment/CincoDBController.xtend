package de.jabc.cinco.meta.plugin.pyro.templates.deployment

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type
import mgl.Attribute
import mgl.GraphicalModelElement
import java.util.List
import mgl.Node
import mgl.UserDefinedType
import de.jabc.cinco.meta.plugin.pyro.utils.ModelParser
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EStructuralFeature
import mgl.NodeContainer
import mgl.Edge
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EClassifier
import org.eclipse.emf.ecore.EReference

class CincoDBController implements Templateable{

override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums,ArrayList<GraphModel> graphModels,ArrayList<EPackage> ecores)
'''
package de.ls5.cinco.deployment;

import de.ls5.dywa.api.ObjectController;
import de.ls5.dywa.api.TypeController;
import de.ls5.dywa.api.query.AbstractQuery;
import de.ls5.dywa.api.query.DeleteQuery;
import de.ls5.dywa.entities.object.DBField;
import de.ls5.dywa.entities.object.DBType;
import de.ls5.dywa.entities.property.PropertyType;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;

/**
 * Generated by Pyro CINCO-Meta-Plugin
 */
@Named("cincoDBController")
@RequestScoped
public class CincoDBControllerImpl implements CincoDBController{

    @Inject
	private TypeController typeController;

    @Inject
    private ObjectController objctrl;

    @Override
    public void createGraphModelDBTypes() {
        //Create GraphModel DBTypes
        System.out.print("Remove all DBTypes from Database");
        removeGraphModelDBTypes();
        System.out.println("[ok]");
        System.out.print("Creating abstract DBTypes for the Graphmodel");
        //Create IdentifiableElement
        final DBType identifiableElement = this.typeController.createType("IdentifiableElement");
        identifiableElement.setAbstractType(false);
        //System.out.println(identifiableElement.getName() + " created");

        //Create ModelElement and Model ElementContainer
        final DBType modelElement = this.typeController.createType("ModelElement");
        final DBType modelElementContainer = this.typeController.createType("ModelElementContainer");
        modelElement.setAbstractType(false);
        this.typeController.addSuperType(modelElement,identifiableElement);
        this.typeController.addComplexFieldToType(modelElement, "container", PropertyType.OBJECT, modelElementContainer);
        //System.out.println(modelElement.getName() + " created");

        modelElementContainer.setAbstractType(false);
        this.typeController.addSuperType(modelElementContainer,identifiableElement);
        this.typeController.addComplexFieldToType(modelElementContainer, "modelElements", PropertyType.OBJECT_LIST, modelElement);
        //System.out.println(modelElementContainer.getName() + " created");

        //Create GraphModel
        final DBType graphModel = this.typeController.createType("GraphModel");
        this.typeController.addPrimitiveFieldToType(graphModel,"theme",PropertyType.STRING);
        this.typeController.addPrimitiveFieldToType(graphModel,"edgeStyleModeConnector",PropertyType.STRING);
        this.typeController.addPrimitiveFieldToType(graphModel,"edgeStyleModeRouter",PropertyType.STRING);
        this.typeController.addPrimitiveFieldToType(graphModel,"scaleFactor",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"edgeTriggerWidth",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"snapRadius",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"paperWidth",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"paperHeight",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"gridSize",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"resizeStep",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"rotateStep",PropertyType.DOUBLE);
        this.typeController.addPrimitiveFieldToType(graphModel,"minimizedMenu",PropertyType.BOOLEAN);
        this.typeController.addPrimitiveFieldToType(graphModel,"minimizedGraph",PropertyType.BOOLEAN);
        this.typeController.addPrimitiveFieldToType(graphModel,"minimizedMap",PropertyType.BOOLEAN);
        graphModel.setAbstractType(false);
        this.typeController.addSuperType(graphModel,modelElementContainer);
        //System.out.println(graphModel.getName() + " created");

        //Create Point
        final DBType point = this.typeController.createType("Point");
        graphModel.setAbstractType(false);
        this.typeController.addPrimitiveFieldToType(point, "x", PropertyType.LONG);
        this.typeController.addPrimitiveFieldToType(point,"y",PropertyType.LONG);
        //System.out.println(point.getName() + " created");

        //Create Node and Edge
        final DBType node = this.typeController.createType("Node");
        final DBType edge = this.typeController.createType("Edge");
        node.setAbstractType(false);
        edge.setAbstractType(false);
        this.typeController.addSuperType(node, modelElement);
        this.typeController.addPrimitiveFieldToType(node,"width",PropertyType.LONG);
        this.typeController.addPrimitiveFieldToType(node,"height",PropertyType.LONG);
        this.typeController.addComplexFieldToType(node, "position", PropertyType.OBJECT, point);
        this.typeController.addComplexFieldToType(node, "incoming", PropertyType.OBJECT_LIST, edge);
        this.typeController.addComplexFieldToType(node,"outgoing",PropertyType.OBJECT_LIST,edge);
        this.typeController.addPrimitiveFieldToType(node,"angle",PropertyType.DOUBLE);
        //System.out.println(node.getName() + " created");

        this.typeController.addSuperType(edge,modelElement);
        this.typeController.addComplexFieldToType(edge, "sourceElement", PropertyType.OBJECT, node);
        this.typeController.addComplexFieldToType(edge,"targetElement",PropertyType.OBJECT,node);
        this.typeController.addComplexFieldToType(edge,"bendingPoints",PropertyType.OBJECT_LIST,point);
        //System.out.println(edge.getName() + " created");

        //Create Container
        final DBType container = this.typeController.createType("Container");
        container.setAbstractType(false);
        this.typeController.addSuperType(container, node);
        this.typeController.addSuperType(container,modelElementContainer);
        //System.out.println(container.getName() + " created");
        System.out.println("[ok]");
        «FOR GraphModel g:graphModels»
        //Create Types
        «FOR Type type : g.types»
        «IF type instanceof UserDefinedType»
        final DBType «type.name.toFirstLower»Type = this.typeController.createType("«type.name.toFirstUpper»Type");
        «ENDIF»
        «ENDFOR»
        
        «ENDFOR»

        //Create the CommandStack
        final DBType pyroCommand = this.typeController.createType("PyroCommand");
        pyroCommand.setAbstractType(false);
        DBField dywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroCommand, "dywaId", PropertyType.LONG);
        DBField typeDbField = this.typeController.addPrimitiveFieldToType(pyroCommand, "type", PropertyType.STRING);
        DBField timeDbField = this.typeController.addPrimitiveFieldToType(pyroCommand, "time", PropertyType.TIMESTAMP);
        //Create Node Command
        final DBType pyroCreateNodeCommand = this.typeController.createType("PyroCreateNodeCommand");
        this.typeController.addSuperType(pyroCreateNodeCommand,pyroCommand);
        DBField xDbField = this.typeController.addPrimitiveFieldToType(pyroCreateNodeCommand, "x", PropertyType.DOUBLE);
        DBField yDbField = this.typeController.addPrimitiveFieldToType(pyroCreateNodeCommand, "y", PropertyType.DOUBLE);
        //Remove Node Command
        final DBType pyroRemoveNodeCommand = this.typeController.createType("PyroRemoveNodeCommand");
        this.typeController.addSuperType(pyroRemoveNodeCommand,pyroCommand);
        DBField removedNodeField = this.typeController.addComplexFieldToType(pyroRemoveNodeCommand, "node", PropertyType.OBJECT,node);
        //Move Node Command
        final DBType pyroMoveNodeCommand = this.typeController.createType("PyroMoveNodeCommand");
        this.typeController.addSuperType(pyroMoveNodeCommand,pyroCreateNodeCommand);
        DBField preXDbField = this.typeController.addPrimitiveFieldToType(pyroMoveNodeCommand, "preX", PropertyType.DOUBLE);
        DBField preYDbField = this.typeController.addPrimitiveFieldToType(pyroMoveNodeCommand, "preY", PropertyType.DOUBLE);
        //Resize Node Command
        final DBType pyroResizeNodeCommand = this.typeController.createType("PyroResizeNodeCommand");
        this.typeController.addSuperType(pyroResizeNodeCommand,pyroCommand);
        DBField heightDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "height", PropertyType.DOUBLE);
        DBField widthDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "width", PropertyType.DOUBLE);
        DBField preHeightDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "preHeight", PropertyType.DOUBLE);
        DBField preWidthDbField = this.typeController.addPrimitiveFieldToType(pyroResizeNodeCommand, "preWidth", PropertyType.DOUBLE);
        //Rotate Node Command
        final DBType pyroRotateNodeCommand = this.typeController.createType("PyroRotateNodeCommand");
        this.typeController.addSuperType(pyroRotateNodeCommand,pyroCommand);
        DBField angleDbField = this.typeController.addPrimitiveFieldToType(pyroRotateNodeCommand, "angle", PropertyType.DOUBLE);
        DBField preAngleDbField = this.typeController.addPrimitiveFieldToType(pyroRotateNodeCommand, "preAngle", PropertyType.DOUBLE);
        //Create Edge Command
        final DBType pyroCreateEdgeCommand = this.typeController.createType("PyroCreateEdgeCommand");
        this.typeController.addSuperType(pyroCreateEdgeCommand,pyroCommand);
        DBField sourceDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroCreateEdgeCommand, "sourceDywaId", PropertyType.LONG);
        DBField targetDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroCreateEdgeCommand, "targetDywaId", PropertyType.LONG);
        //Remove Edge Command
        final DBType pyroRemoveEdgeCommand = this.typeController.createType("PyroRemoveEdgeCommand");
        this.typeController.addSuperType(pyroRemoveEdgeCommand,pyroCommand);
        DBField removedEdgeField = this.typeController.addComplexFieldToType(pyroRemoveEdgeCommand, "edge", PropertyType.OBJECT,edge);
        //Reconnect Edge Command
        final DBType pyroReconnectEdgeCommand = this.typeController.createType("PyroReconnectEdgeCommand");
        this.typeController.addSuperType(pyroReconnectEdgeCommand,pyroCreateEdgeCommand);
        DBField preSourceDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroReconnectEdgeCommand, "preSourceDywaId", PropertyType.LONG);
        DBField preTargetDywaIdDbField = this.typeController.addPrimitiveFieldToType(pyroReconnectEdgeCommand, "preTargetDywaId", PropertyType.LONG);
        //Vertex Edge Command
        final DBType pyroVertexEdgeCommand = this.typeController.createType("PyroVertexEdgeCommand");
        this.typeController.addSuperType(pyroVertexEdgeCommand,pyroCommand);
        DBField vertexesDbField = this.typeController.addComplexFieldToType(pyroVertexEdgeCommand, "vertexes", PropertyType.OBJECT_LIST,point);
        DBField preVertexesDbField = this.typeController.addComplexFieldToType(pyroVertexEdgeCommand, "preVertexes", PropertyType.OBJECT_LIST,point);
        // Referenced ECOREs
        «FOR EPackage ePack : ecores»
        «FOR EClassifier eObject: ePack.EClassifiers»
        «IF eObject instanceof EClass»
        final DBType «eObject.name.toFirstLower» = this.typeController.createType("«eObject.name.toFirstUpper»");
        «ENDIF»
        «ENDFOR»
        «ENDFOR»
        
        «FOR GraphModel g:graphModels»
        //Create «g.name» Node-Types and Container-Types

        «FOR Node node: g.nodes»
			«createNode(node,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»
		«FOR NodeContainer node:g.nodes.filter[n | (n instanceof NodeContainer)].map[nc | nc as NodeContainer]»
			«createContainer(node,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»

        //Create «g.name» Edge-Type

        «FOR Edge edge: g.edges»
		«createEdge(edge,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»
        «ENDFOR»
        
        «FOR GraphModel g:graphModels»
        //«g.name.toFirstUpper» Attributes Command
        «IF g.attributes.size > 0»
        final DBType pyro«g.name.toFirstUpper»AttributeCommand = this.typeController.createType("Pyro«g.name.toFirstUpper»AttributeCommand");
		pyro«g.name.toFirstUpper»AttributeCommand.setAbstractType(false);
        «ENDIF»
        «FOR Attribute attr : g.attributes»
	    	«createCommandAttribute(attr,new ArrayList<Type>(g.types.toList),g.name)»
	    «ENDFOR»
        // «g.name.toFirstUpper» Node Attributes Commands
        «FOR Node node: g.nodes»
				«createAttributeCommmand(node,new ArrayList<Type>(g.types.toList))»
		«ENDFOR»
		«FOR NodeContainer node: g.nodes.filter[n | (n instanceof NodeContainer)].map[nc | nc as NodeContainer]»
				«createAttributeCommmand(node,new ArrayList<Type>(g.types.toList))»
		«ENDFOR»
		// «g.name.toFirstUpper» Edge Attributes Commands
		«FOR Edge edge: g.edges»
		«createAttributeCommmand(edge,new ArrayList<Type>(g.types.toList))»
		«ENDFOR»
		«ENDFOR»


        DBField pyroCommandStackDbField = this.typeController.addComplexFieldToType(graphModel, "pyroCommandStack", PropertyType.OBJECT_LIST, pyroCommand);
        DBField pyroCommandStackIndexDbField = this.typeController.addPrimitiveFieldToType(graphModel, "pyroCommandStackIndex", PropertyType.LONG);
        «FOR GraphModel g:graphModels»
        //Create «g.name»
        final DBType «g.name.toFirstLower» = this.typeController.createType("«g.name.toFirstUpper»");
        «g.name.toFirstLower».setAbstractType(false);
        «g.name.toFirstLower».setShortDescription("«g.name.toFirstLower»");
        this.typeController.addSuperType(«g.name.toFirstLower», graphModel);
        «FOR Attribute attr : g.attributes»
	    	«createAttribute(attr,new ArrayList<Type>(g.types.toList),g.name,g)»
	    «ENDFOR»
        System.out.println(«g.name.toFirstLower».getName() + " created");
		

        //Create «g.name» Node-Attributes and Container-Attributes

        «FOR Node node: g.nodes»
        //«node.name.toFirstUpper» Attribute
			«createNodeAttribute(node,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»
		«FOR NodeContainer node:g.nodes.filter[n | (n instanceof NodeContainer)].map[nc | nc as NodeContainer]»
		//«node.name.toFirstUpper» Attribute
			«createContainerAttribute(node,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»

        //Create «g.name» Edge-Attributes

        «FOR Edge edge: g.edges»
        //«edge.name.toFirstUpper» Attribute
		«createEdgeAttribute(edge,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»
		
		//Create «g.name» Cross-Type References

        «FOR Node node: g.nodes»
			«createReferenceAttributes(node,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»
		
		«FOR NodeContainer node: g.nodes.filter[n | (n instanceof NodeContainer)].map[nc | nc as NodeContainer]»
			«createReferenceAttributes(node,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»

        «FOR Edge edge: g.edges»
			«createReferenceAttributes(edge,new ArrayList<Type>(g.types.toList),g)»
		«ENDFOR»
		
		«FOR Type type : g.types»
        «IF type instanceof UserDefinedType»
        «createUserDefinedTypeAttributes(type as UserDefinedType,new ArrayList<Type>(g.types.toList),g)»
        «ENDIF»
        «ENDFOR»
        «ENDFOR»
        
        «FOR EPackage ePack : ecores»
        «FOR EClassifier eObject: ePack.EClassifiers»
        «IF eObject instanceof EClass»
       	«FOR EAttribute eA:(eObject as EClass).EAllAttributes»
        DBField «eObject.name.toFirstLower»«eA.name.toFirstUpper» = this.typeController.addPrimitiveFieldToType(«eObject.name.toFirstLower», "«eA.name.toFirstLower»", «getEcoreAttributeType(eA.EAttributeType.name)»);
       	«ENDFOR»
       	«FOR EReference eA:(eObject as EClass).EAllReferences»
       	«IF eA.upperBound > 1 || eA.upperBound <= -1»
        DBField «eObject.name.toFirstLower»«eA.name.toFirstUpper» = this.typeController.addComplexFieldToType(«eObject.name.toFirstLower», "«eA.name.toFirstLower»", PropertyType.OBJECT_LIST,«eA.EType.name.toFirstLower»);
       	«ELSE»
       	DBField «eObject.name.toFirstLower»«eA.name.toFirstUpper» = this.typeController.addComplexFieldToType(«eObject.name.toFirstLower», "«eA.name.toFirstLower»", PropertyType.OBJECT,«eA.EType.name.toFirstLower»);
       	«ENDIF»
       	«ENDFOR»
        «ENDIF»
        «ENDFOR»
        «ENDFOR»
        System.out.println("Create inheritances");
        «FOR GraphModel g:graphModels»
        «FOR Node node: g.nodes»
			«createInheritance(node)»
		«ENDFOR»
		
		«FOR NodeContainer node: g.nodes.filter[n | (n instanceof NodeContainer)].map[nc | nc as NodeContainer]»
			«createInheritance(node)»
		«ENDFOR»

        «FOR Edge edge: g.edges»
			«createInheritance(edge)»
		«ENDFOR»
		«ENDFOR»
        System.out.println("[ok]");
        
        createProjectEnvironment(graphModel);
    }

    private void createProjectEnvironment(DBType graphModel){
        System.out.print("Creating DBTypes for the Project and User");
        //Create IdentifiableElement
        final DBType user = this.typeController.createType("User");
        final DBType project = this.typeController.createType("Project");

        user.setAbstractType(false);
        this.typeController.addPrimitiveFieldToType(user,"userName",PropertyType.STRING);
        this.typeController.addComplexFieldToType(user, "projects", PropertyType.OBJECT_LIST, project);
        this.typeController.addPrimitiveFieldToType(project,"edited",PropertyType.TIMESTAMP);
        this.typeController.addPrimitiveFieldToType(project,"created",PropertyType.TIMESTAMP);

        project.setAbstractType(false);
        this.typeController.addPrimitiveFieldToType(project,"projectName",PropertyType.STRING);
        this.typeController.addComplexFieldToType(project, "users", PropertyType.OBJECT_LIST, user);
        this.typeController.addComplexFieldToType(project, "graphModels", PropertyType.OBJECT_LIST, graphModel);
    }

    @Override
	public void removeGraphModelDBTypes() {
		final Set<DBType> types = this.typeController.getAllTypes(DeleteQuery.BOTH, AbstractQuery.BOTH);
		final List<DBType> sortedTypes = new ArrayList<>(types.size());

		final Comparator<DBType> comp = new Comparator<DBType>() {
			@Override
			public int compare(DBType o1, DBType o2) {
				if (o1.isSubTypeOf(o2)) {
					return -1;
				}
				if (o2.isSubTypeOf(o1)) {
					return 1;
				}
				return 0;
			}
		};

		final int size = types.size();
		for (int i = 0; i < size; i++) {
			final DBType min = Collections.min(types, comp);
			sortedTypes.add(min);
			types.remove(min);
		}

		for (final DBType t : sortedTypes) {
			for (final DBType st : new ArrayList<>(t.getSuperTypes())) {
				this.typeController.removeSuperType(t, st);
			}
		}

		for (final DBType t : sortedTypes) {
			for (final DBField f : new ArrayList<>(t.getFields())) {
				this.typeController.deleteTypeProperty(t, f);
			}
		}

		for (final DBType t : sortedTypes) {
			this.typeController.deleteTypeWithObjects(t);
		}
	}

}

'''

def createNode(GraphicalModelElement element,ArrayList<Type> enums,GraphModel graphModel)
'''
	//Create «element.name.toFirstUpper»
	final DBType «element.name.toFirstLower» = this.typeController.createType("«element.name.toFirstUpper»");
	«element.name.toFirstLower».setAbstractType(false);
	this.typeController.addSuperType(«element.name.toFirstLower», node);
'''

def createNodeAttribute(GraphicalModelElement element,ArrayList<Type> enums,GraphModel graphModel)
'''
	//Attribute «element.name.toFirstUpper»
	«createAttributes(element,enums,graphModel)»
	«IF element instanceof Node»
	«createPrimeAttribute(element as Node)»
	«ENDIF»
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createPrimeAttribute(Node node)
'''
«IF node.primeReference != null»
this.typeController.addComplexFieldToType(«node.name.toFirstLower»,"«node.primeReference.name.toFirstLower»",PropertyType.OBJECT,«node.primeReference.type.name.toFirstLower»);
«ENDIF»
'''

def createAttributeCommmand(GraphicalModelElement element,ArrayList<Type> enums)
'''
	//Attribute «element.name.toFirstUpper» Commnad
	final DBType pyro«element.name.toFirstUpper»AttributeCommand = this.typeController.createType("Pyro«element.name.toFirstUpper»AttributeCommand");
	pyro«element.name.toFirstUpper»AttributeCommand.setAbstractType(false);
	this.typeController.addSuperType(pyro«element.name.toFirstUpper»AttributeCommand, pyroCommand);
	«createCommandAttributes(element,enums)»
'''
def createEdge(GraphicalModelElement element,ArrayList<Type> enums,GraphModel graphModel)
'''
	//Create «element.name.toFirstUpper»
	final DBType «element.name.toFirstLower» = this.typeController.createType("«element.name.toFirstUpper»");
	«element.name.toFirstLower».setAbstractType(false);
	this.typeController.addSuperType(«element.name.toFirstLower», edge);
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createEdgeAttribute(GraphicalModelElement element,ArrayList<Type> enums,GraphModel graphModel)
'''
	//Attribute «element.name.toFirstUpper»
	«createAttributes(element,enums,graphModel)»
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createContainer(GraphicalModelElement element,ArrayList<Type> enums,GraphModel graphModel)
'''
	//Create «element.name.toFirstUpper»
	final DBType «element.name.toFirstLower» = this.typeController.createType("«element.name.toFirstUpper»");
	«element.name.toFirstLower».setAbstractType(false);
	this.typeController.addSuperType(«element.name.toFirstLower», container);
'''

def createContainerAttribute(GraphicalModelElement element,ArrayList<Type> enums,GraphModel graphModel)
'''
	//Attribute «element.name.toFirstUpper»
	«createAttributes(element,enums,graphModel)»
	System.out.println(«element.name.toFirstLower».getName() + " created");
'''

def createAttributes(mgl.ModelElement modelElement,ArrayList<Type> enums,GraphModel graphModel)
'''
	«IF !modelElement.attributes.empty»
	«FOR Attribute attr : modelElement.attributes»
        «createAttribute(attr,enums,modelElement.name,graphModel)»
    «ENDFOR»
    «ENDIF»
'''

def createReferenceAttributes(mgl.ModelElement modelElement,ArrayList<Type> enums,GraphModel graphModel)
'''
	«IF !modelElement.attributes.empty»
	«FOR Attribute attr : modelElement.attributes»
        «createReferenceAttribute(attr,enums,modelElement.name,graphModel)»
    «ENDFOR»
    «ENDIF»
'''

def createAttributes(EClass eClass ,ArrayList<Type> enums)
'''
	«IF !eClass.EAllStructuralFeatures.empty»
	«FOR EStructuralFeature attr : eClass.EAllStructuralFeatures»
	«IF attr instanceof EAttribute»
        «createAttribute(attr,eClass.name+"Prime")»
    «ENDIF»
    «ENDFOR»
    «ENDIF»
'''

def createUserDefinedTypeAttributes(UserDefinedType modelElement,ArrayList<Type> enums,GraphModel graphModel)
'''
	«IF !modelElement.attributes.empty»
	«FOR Attribute attr : modelElement.attributes»
        «createAttribute(attr,enums,modelElement.name+"Type",graphModel)»
    «ENDFOR»
    «ENDIF»
'''

def createCommandAttributes(GraphicalModelElement modelElement,ArrayList<Type> enums)
'''
	«IF !modelElement.attributes.empty»
	«FOR Attribute attr : modelElement.attributes»
        «createCommandAttribute(attr,enums,modelElement.name)»
    «ENDFOR»
    «ENDIF»
'''
def createAttribute(Attribute attr,ArrayList<Type> enums,String elementName,GraphModel graphModel)
'''
	«IF attr.upperBound == 1 && (attr.lowerBound == 0 || attr.lowerBound == 1) »
	«createPrimativeAttribute(attr,elementName,enums,graphModel)»
	«ELSE»
	«createListAttribute(attr,enums,elementName,graphModel)»
	«ENDIF»
	
'''

def createReferenceAttribute(Attribute attr,ArrayList<Type> enums,String elementName,GraphModel graphModel)
'''
	«IF attr.upperBound == 1 && (attr.lowerBound == 0 || attr.lowerBound == 1) »
	«createReferencePrimativeAttribute(attr,elementName,enums,graphModel)»
	«ELSE»
	«createReferenceListAttribute(attr,enums,elementName,graphModel)»
	«ENDIF»
	
'''

def createAttribute(EAttribute attr,String elementName)
'''
	«IF attr.upperBound == 1 && (attr.lowerBound == 0 || attr.lowerBound == 1) »
	«createPrimativeAttribute(attr,elementName)»
	«ENDIF»
	
'''

def createCommandAttribute(Attribute attr,ArrayList<Type> enums,String elementName)
'''
	«IF attr.upperBound == 1 && (attr.lowerBound == 0 || attr.lowerBound == 1) »
	«createPrimativeCommandAttribute(attr,elementName,enums)»
	«ELSE»
	«createListCommandAttribute(attr,enums,elementName)»
	«ENDIF»
	
'''

def createListAttribute(Attribute attr,ArrayList<Type> enums, String elementName,GraphModel graphModel)
'''
	«IF ModelParser.isUserDefinedType(attr,enums)»
	this.typeController.addComplexFieldToType(«elementName.toFirstLower»,"«attr.name.toFirstLower»",PropertyType.OBJECT_LIST,«attr.type.toFirstLower»Type);
	«ELSEIF ModelParser.isReferencedModelType(graphModel,attr)»
	this.typeController.addComplexFieldToType(«elementName.toFirstLower»,"«attr.name.toFirstLower»",PropertyType.OBJECT_LIST,«attr.type.toFirstLower»);
	«ELSE»
	this.typeController.addPrimitiveFieldToType(«elementName.toFirstLower»,"«attr.name.toFirstLower»",PropertyType.STRING_LIST);
	«ENDIF»
'''
def createReferenceListAttribute(Attribute attr,ArrayList<Type> enums, String elementName,GraphModel graphModel)
'''
	«IF ModelParser.isReferencedModelType(graphModel,attr)»
	this.typeController.addComplexFieldToType(«elementName.toFirstLower»,"«attr.name.toFirstLower»",PropertyType.OBJECT_LIST,«attr.type.toFirstLower»);
	«ENDIF»
'''
def createListCommandAttribute(Attribute attr,ArrayList<Type> enums, String elementName)
'''
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"«attr.name.toFirstLower»",PropertyType.STRING_LIST);
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"pre«attr.name.toFirstUpper»",PropertyType.STRING_LIST);
'''

def createPrimativeAttribute(Attribute attribute,String elementName,ArrayList<Type> enums,GraphModel graphModel)
'''
	«IF ModelParser.isUserDefinedType(attribute,enums)»
	this.typeController.addComplexFieldToType(«elementName.toFirstLower»,"«attribute.name.toFirstLower»",PropertyType.OBJECT,«attribute.type.toFirstLower»Type);
	«ELSEIF !ModelParser.isReferencedModelType(graphModel,attribute)»
	this.typeController.addPrimitiveFieldToType(«elementName.toFirstLower»,"«attribute.name.toFirstLower»",«getAttributeType(attribute.type)»);
	«ENDIF»
''' 

def createReferencePrimativeAttribute(Attribute attribute,String elementName,ArrayList<Type> enums,GraphModel graphModel)
'''
	«IF ModelParser.isReferencedModelType(graphModel,attribute)»
	this.typeController.addComplexFieldToType(«elementName.toFirstLower»,"«attribute.name.toFirstLower»",PropertyType.OBJECT,«attribute.type.toFirstLower»);
	«ENDIF»
''' 

def createPrimativeAttribute(EAttribute attribute,String elementName)
'''
	«IF !attribute.name.equalsIgnoreCase("id")»
	this.typeController.addPrimitiveFieldToType(«elementName.toFirstLower»,"«attribute.name.toFirstLower»",«getAttributeType(attribute.getEType().name)»);
	«ENDIF»
''' 

def createPrimativeCommandAttribute(Attribute attribute,String elementName,List<Type> enums)
'''
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"«attribute.name.toFirstLower»",«getAttributeType(attribute.type)»);
	this.typeController.addPrimitiveFieldToType(pyro«elementName.toFirstUpper»AttributeCommand,"pre«attribute.name.toFirstUpper»",«getAttributeType(attribute.type)»);
''' 

def getAttributeType(String type) {
	if(type.equals("EString")) return "PropertyType.STRING";
	if(type.equals("EInt")) return "PropertyType.LONG";
	if(type.equals("EDouble")) return "PropertyType.DOUBLE";
	if(type.equals("EBoolean")) return "PropertyType.BOOLEAN";
	//ENUM
	return "PropertyType.STRING";
}

def getEcoreAttributeType(String type) {
	if(type.equals("EString")  ) return "PropertyType.STRING";
	
	if(type.equals("EInt") || type.equals("EIntegerObject")) return "PropertyType.LONG";
	if(type.equals("ELong") || type.equals("ELongObject")) return "PropertyType.LONG";
	if(type.equals("EShort") || type.equals("EShortObject")) return "PropertyType.LONG";
	if(type.equals("EBigInteger") || type.equals("EBigIntegerObject")) return "PropertyType.LONG";
	
	if(type.equals("EDouble") || type.equals("EDoubleObject")) return "PropertyType.DOUBLE";
	if(type.equals("EFloat") || type.equals("EFloatObject")) return "PropertyType.DOUBLE";
	if(type.equals("EBigDecimal") || type.equals("EBigDecimalObject")) return "PropertyType.DOUBLE";
	
	if(type.equals("EBoolean") || type.equals("EBooleanObject")) return "PropertyType.BOOLEAN";
	
	if(type.equals("EDate") || type.equals("EBooleanObject")) return "PropertyType.TIMESTAMP";
	
	if(type.equals("EByte") || type.equals("EByteObject")) return "PropertyType.STRING";
	if(type.equals("EChar") || type.equals("ECharacterObject")) return "PropertyType.STRING";
	
	if(type.equals("EByteArray") || type.equals("EByteArrayObject")) return "PropertyType.STRING_LIST";

	//ENUM
	return "PropertyType.STRING";
}

def createInheritance(Node n) '''
«IF n.extends != null»
this.typeController.addSuperType(«n.name.toFirstLower»,«n.extends.name.toFirstLower»);
«ENDIF»
'''

def createInheritance(Edge n) '''
«IF n.extends != null»
this.typeController.addSuperType(«n.name.toFirstLower»,«n.extends.name.toFirstLower»);
«ENDIF»
'''

def createInheritance(NodeContainer n) '''
«IF n.extends != null»
this.typeController.addSuperType(«n.name.toFirstLower»,«n.extends.name.toFirstLower»);
«ENDIF»
'''

}