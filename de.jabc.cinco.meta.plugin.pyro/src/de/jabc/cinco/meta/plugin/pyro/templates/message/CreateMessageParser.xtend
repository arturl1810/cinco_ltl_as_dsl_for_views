package de.jabc.cinco.meta.plugin.pyro.templates.message

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type

class CreateMessageParser implements Templateable{
	
	override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums)
	'''
package de.ls5.cinco.message;

import de.ls5.cinco.transformation.api.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * Generated by Pyro CINCO Meta plugin
 */
public class CreateMessageParser {

    public static JSONObject createElement(String jsonString,C«graphModel.name.toFirstUpper» c«graphModel.name.toFirstUpper»){
        JSONObject receivedMessage = MessageParser.parse(jsonString);
        «FOR StyledEdge se:edges»
        if(receivedMessage.get("name").equals("«se.modelElement.name.toFirstUpper»")) {
            JSONObject source = (JSONObject) receivedMessage.get("source");
            JSONObject target = (JSONObject) receivedMessage.get("target");
            long sourceId = Long.parseLong("" + source.get("cinco_id"));
            long targetId = Long.parseLong(""+target.get("cinco_id"));
            //Sources
            «FOR ConnectionConstraint cc:validConnections»
            «IF cc.connectingEdge.modelElement.name.equals(se.modelElement.name)»
            if(source.get("cinco_name").equals("«cc.sourceNode.modelElement.name.toFirstUpper»") && target.get("cinco_name").equals("«cc.targetNode.modelElement.name.toFirstUpper»")) {
                C«cc.sourceNode.modelElement.name.toFirstUpper» c«cc.sourceNode.modelElement.name.toFirstUpper»Source = c«graphModel.name.toFirstUpper».getC«cc.sourceNode.modelElement.name.toFirstUpper»(sourceId);
                //Targets depending on source
                C«cc.targetNode.modelElement.name.toFirstUpper» cTarget«cc.targetNode.modelElement.name.toFirstUpper» = c«graphModel.name.toFirstUpper».getC«cc.targetNode.modelElement.name.toFirstUpper»(targetId);
                C«cc.connectingEdge.modelElement.name.toFirstUpper» c«cc.connectingEdge.modelElement.name.toFirstUpper» = c«cc.sourceNode.modelElement.name.toFirstUpper»Source.newC«cc.connectingEdge.modelElement.name.toFirstUpper»(cTarget«cc.targetNode.modelElement.name.toFirstUpper»);
            	return getCreateResponse(c«cc.connectingEdge.modelElement.name.toFirstUpper».getModelElement().getId(),(JSONObject) receivedMessage.get("element"));
            }
            «ENDIF»
            «ENDFOR»
            return getCreateErrorResponse((JSONObject) receivedMessage.get("element"));

        }
        «ENDFOR»
        double x = Double.parseDouble(""+getPosition((JSONObject) receivedMessage.get("element")).get("x"));
        double y = Double.parseDouble(""+getPosition((JSONObject) receivedMessage.get("element")).get("y"));
		«FOR StyledNode sn:nodes»
		if(receivedMessage.get("name").equals("«sn.modelElement.name.toFirstUpper»")) {
		    C«sn.modelElement.name.toFirstUpper» c«sn.modelElement.name.toFirstUpper» = c«graphModel.name.toFirstUpper».newC«sn.modelElement.name.toFirstUpper»((long)x, (long)y);
		    return getCreateResponse(c«sn.modelElement.name.toFirstUpper».getModelElement().getId(),(JSONObject) receivedMessage.get("element"));
		}
        «ENDFOR»
        return getCreateErrorResponse((JSONObject) receivedMessage.get("element"));
    }

    private static JSONObject getPosition(JSONObject element) {
        return (JSONObject) element.get("position");
    }

    private static JSONObject getResponse() {
        JSONObject response = new JSONObject();
        return response;
    }

    private static JSONObject getCreateResponse(long id,JSONObject element) {
        JSONObject response = getResponse();
        response.put("valid",true);
        response.put("dywaId",id);
        response.put("muId",(String) element.get("id"));
        return response;
    }

    private static JSONObject getCreateErrorResponse(JSONObject element) {
        JSONObject response = getResponse();
        response.put("valid",false);
        response.put("muId",(String) element.get("id"));
        return response;
    }
}
	
	'''
	
}