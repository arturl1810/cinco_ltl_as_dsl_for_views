package de.jabc.cinco.meta.plugin.pyro.templates.message

import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.TemplateContainer
import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import de.jabc.cinco.meta.plugin.pyro.utils.ModelParser
import mgl.Node
import mgl.NodeContainer
import mgl.ReferencedEClass

class CreateMessageParser extends Templateable{
	
	override create(TemplateContainer tc)
	'''
		package de.ls5.cinco.pyro.message.«tc.graphModel.name.toFirstLower»;
		
		import de.ls5.cinco.pyro.transformation.api.«tc.graphModel.name.toFirstLower».*;
		import de.ls5.cinco.pyro.message.MessageParser;
		import de.ls5.dywa.generated.entity.*;
		import org.json.simple.JSONObject;
		import org.json.simple.parser.JSONParser;
		import org.json.simple.parser.ParseException;
		
		/**
		 * Generated by Pyro CINCO Meta plugin
		 */
		public class CreateMessageParser {
		
		    public static JSONObject createElement(String jsonString,C«tc.graphModel.name.toFirstUpper» c«tc.graphModel.name.toFirstUpper»){
		        JSONObject receivedMessage = MessageParser.parse(jsonString);
		        «FOR StyledEdge se:tc.edges»
		        if(receivedMessage.get("name").equals("«se.modelElement.name.toFirstUpper»")) {
		            JSONObject source = (JSONObject) receivedMessage.get("source");
		            JSONObject target = (JSONObject) receivedMessage.get("target");
		            long sourceId = Long.parseLong("" + source.get("cinco_id"));
		            long targetId = Long.parseLong(""+target.get("cinco_id"));
		            //Sources
		            «FOR ConnectionConstraint cc:tc.validConnections»
		            «IF cc.connectingEdge.modelElement.name.equals(se.modelElement.name)»
		            if(source.get("cinco_name").equals("«cc.sourceNode.modelElement.name.toFirstUpper»") && target.get("cinco_name").equals("«cc.targetNode.modelElement.name.toFirstUpper»")) {
		                C«cc.sourceNode.modelElement.name.toFirstUpper» c«cc.sourceNode.modelElement.name.toFirstUpper»Source = c«tc.graphModel.name.toFirstUpper».getC«cc.sourceNode.modelElement.name.toFirstUpper»(sourceId);
		                //Targets depending on source
		                C«cc.targetNode.modelElement.name.toFirstUpper» cTarget«cc.targetNode.modelElement.name.toFirstUpper» = c«tc.graphModel.name.toFirstUpper».getC«cc.targetNode.modelElement.name.toFirstUpper»(targetId);
		                C«cc.connectingEdge.modelElement.name.toFirstUpper» c«cc.connectingEdge.modelElement.name.toFirstUpper» = c«cc.sourceNode.modelElement.name.toFirstUpper»Source.newC«cc.connectingEdge.modelElement.name.toFirstUpper»(cTarget«cc.targetNode.modelElement.name.toFirstUpper»);
		            	return getCreateResponse(c«cc.connectingEdge.modelElement.name.toFirstUpper».getModelElement().getId(),(JSONObject) receivedMessage.get("element"));
		            }
		            «ENDIF»
		            «ENDFOR»
		            return getCreateErrorResponse((JSONObject) receivedMessage.get("element"));
		
		        }
		        «ENDFOR»
		        double x = Double.parseDouble(""+getPosition((JSONObject) receivedMessage.get("element")).get("x"));
		        double y = Double.parseDouble(""+getPosition((JSONObject) receivedMessage.get("element")).get("y"));
				«FOR StyledNode sn:tc.nodes»
				if(receivedMessage.get("name").equals("«sn.modelElement.name.toFirstUpper»")) {
					C«sn.modelElement.name.toFirstUpper» c«sn.modelElement.name.toFirstUpper» = null;
					JSONObject parentElement = (JSONObject) receivedMessage.get("parent");
					if(parentElement != null){
						long parentId = (long) parentElement.get("cinco_id");
						String parentType = (String) parentElement.get("cinco_name");
						//«var counter = 0»
						«FOR StyledNode ssn: tc.nodes.filter[n | (n.modelElement instanceof NodeContainer)]»
							«IF ModelParser.isContainable(sn.modelElement,ssn.modelElement as NodeContainer)»
							if(parentType.equals("«ssn.modelElement.name.toFirstUpper»")){
								C«ssn.modelElement.name.toFirstUpper» c«counter»«ssn.modelElement.name.toFirstUpper» = c«tc.graphModel.name.toFirstUpper».getC«ssn.modelElement.name.toFirstUpper»(parentId);
								c«sn.modelElement.name.toFirstUpper» = c«counter»«ssn.modelElement.name.toFirstUpper».newC«sn.modelElement.name.toFirstUpper»((long)x,(long)y);
							}
							«ENDIF»
							//Counter «counter=counter +1»
						«ENDFOR»
					}
					else{
				    	c«sn.modelElement.name.toFirstUpper» = c«tc.graphModel.name.toFirstUpper».newC«sn.modelElement.name.toFirstUpper»((long)x, (long)y);
				    }
				    «IF sn.modelElement instanceof Node»
				    «IF (sn.modelElement as Node).primeReference != null»
				    «««    TODO: Check if this worked. Unchecked cast to ReferencedEClass may be ReferencedModelElement in line
				    //Prime Attribute
		            long «((sn.modelElement as Node).primeReference as ReferencedEClass).type.name.toFirstLower»PrimeId = Long.parseLong (""+((JSONObject) receivedMessage.get("element")).get("cinco_prime_id"));
		            «((sn.modelElement as Node).primeReference as ReferencedEClass).type.name.toFirstUpper» «((sn.modelElement as Node).primeReference as ReferencedEClass).type.name.toFirstLower» = c«tc.graphModel.name.toFirstUpper».get«((sn.modelElement as Node).primeReference as ReferencedEClass).type.name.toFirstUpper»Controller().read«((sn.modelElement as Node).primeReference as ReferencedEClass).type.name.toFirstUpper»(«((sn.modelElement as Node).primeReference  as ReferencedEClass).type.name.toFirstLower»PrimeId);
		            ((«sn.modelElement.name.toFirstUpper») c«sn.modelElement.name.toFirstUpper».getModelElement()).set«(sn.modelElement as Node).primeReference.name.toFirstLower»(«((sn.modelElement as Node).primeReference as ReferencedEClass).type.name.toFirstLower»);
				    «ENDIF»
				    «ENDIF»
				    
				    return getCreateResponse(c«sn.modelElement.name.toFirstUpper».getModelElement().getId(),(JSONObject) receivedMessage.get("element"));
				}
		        «ENDFOR»
		        return getCreateErrorResponse((JSONObject) receivedMessage.get("element"));
		    }
		
		    private static JSONObject getPosition(JSONObject element) {
		        return (JSONObject) element.get("position");
		    }
		
		    private static JSONObject getResponse() {
		        JSONObject response = new JSONObject();
		        return response;
		    }
		
		    private static JSONObject getCreateResponse(long id,JSONObject element) {
		        JSONObject response = getResponse();
		        response.put("valid",true);
		        response.put("dywaId",id);
		        response.put("muId",(String) element.get("id"));
		        return response;
		    }
		
		    private static JSONObject getCreateErrorResponse(JSONObject element) {
		        JSONObject response = getResponse();
		        response.put("valid",false);
		        response.put("muId",(String) element.get("id"));
		        return response;
		    }
		}
			
	'''

	
}