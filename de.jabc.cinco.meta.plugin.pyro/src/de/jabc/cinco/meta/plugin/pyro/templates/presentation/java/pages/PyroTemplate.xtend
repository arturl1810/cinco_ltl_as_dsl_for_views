package de.jabc.cinco.meta.plugin.pyro.templates.presentation.java.pages

import de.jabc.cinco.meta.plugin.pyro.model.TemplateContainer
import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel

class PyroTemplate implements Templateable {
	
	override create(TemplateContainer tc)
	'''
		package de.ls5.cinco.pyro.pages;
		
		import de.ls5.dywa.generated.controller.*;
		import de.ls5.dywa.generated.entity.*;
		import org.apache.tapestry5.EventContext;
		import org.apache.tapestry5.SymbolConstants;
		import org.apache.tapestry5.annotations.Property;
		import org.apache.tapestry5.ioc.annotations.Inject;
		import org.apache.tapestry5.ioc.annotations.Symbol;
		
		import java.util.List;
		import java.util.stream.Collectors;
		
		/**
		 * Generated by Pyro CINCO Meta Plugin
		 */
		public class Pyro {
		
		    @Property
		    @Inject
		    @Symbol(SymbolConstants.TAPESTRY_VERSION)
		    private String tapestryVersion;
		
		    @Property
		    private Project openedProject;
		
		    @Property
		    private GraphModel openedGraphModel;
		
		    @Property
		    private GraphModel iteratedGraph;
		
		    @Inject
		    private ProjectController projectController;
			«FOR GraphModel g:tc.graphModels»
			    @Inject
			    private «g.name.toFirstUpper»Controller graphModelController;
			«ENDFOR»
		     void onActivate(EventContext eventContext) {
		     	if(eventContext.getCount()<=0) {
		             return;
		         }
		        this.openedProject = this.projectController.readProject(eventContext.get(Long.class,0));
		        if(eventContext.getCount()>1) {
        	«FOR GraphModel g:tc.graphModels»
	            this.openedGraphModel = this.graphModelController.read«g.name.toFirstUpper»(eventContext.get(Long.class,1));
	            if(this.openedGraphModel != null){ return; }
            «ENDFOR»
		        }
		        else {
		            if(!this.openedProject.getgraphModels_GraphModel().isEmpty()) {
		                this.openedGraphModel = this.openedProject.getgraphModels_GraphModel().get(0);
		            }
		        }
		        System.out.println("Opened Project " + this.openedProject.getName());
		    }
		
		    public String getGraphCreateCss() {
		        return "btn btn-success btn-sm";
		    }
		
		    public boolean getIsProjectEmpty() {
		        return this.openedProject.getgraphModels_GraphModel().isEmpty();
		    }
		
		    public String getActiveGraphLiCss(){
		        if(this.iteratedGraph.getId() == openedGraphModel.getId()) {
		            return "active";
		        }
		        return "";
		    }
		
		    public String getActiveGraphACss(){
		        if(this.iteratedGraph.getId() == openedGraphModel.getId()) {
		            return "not-active";
		        }
		        return "";
		    }
		    
		    public boolean isProjectEmpty() {
		        return this.openedProject.getgraphModels_GraphModel().isEmpty();
		    }
		
		    public void setContext(Project openedProject,GraphModel openedGraphModel) {
		        this.openedProject = openedProject;
		        this.openedGraphModel = openedGraphModel;
		    }
		    
		    public List<GraphModel> getGraphs() {
		        return this.openedProject.getgraphModels_GraphModel();
		    }
		    
		    public Object[] onPassivate() {
		        if (this.openedGraphModel != null) {
		            return new Object[]{this.openedProject.getId(),this.openedGraphModel.getId()};
		        }
		        else {
		            return new Object[]{this.openedProject.getId()};
		        }
		    }
		
		
		}
	'''
}