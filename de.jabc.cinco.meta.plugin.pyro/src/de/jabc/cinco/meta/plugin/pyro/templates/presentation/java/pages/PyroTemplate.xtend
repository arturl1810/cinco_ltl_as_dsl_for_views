package de.jabc.cinco.meta.plugin.pyro.templates.presentation.java.pages

import de.jabc.cinco.meta.plugin.pyro.templates.Templateable
import mgl.GraphModel
import java.util.ArrayList
import de.jabc.cinco.meta.plugin.pyro.model.StyledNode
import de.jabc.cinco.meta.plugin.pyro.model.StyledEdge
import java.util.HashMap
import de.jabc.cinco.meta.plugin.pyro.model.ConnectionConstraint
import de.jabc.cinco.meta.plugin.pyro.model.EmbeddingConstraint
import mgl.Type

class PyroTemplate implements Templateable {
	
	override create(GraphModel graphModel, ArrayList<StyledNode> nodes, ArrayList<StyledEdge> edges, HashMap<String, ArrayList<StyledNode>> groupedNodes, ArrayList<ConnectionConstraint> validConnections, ArrayList<EmbeddingConstraint> embeddingConstraints, ArrayList<Type> enums)
	'''
package de.mtf.dywa.pages;

import de.ls5.dywa.generated.controller.«graphModel.name.toFirstUpper»Controller;
import de.ls5.dywa.generated.controller.ProjectController;
import de.ls5.dywa.generated.entity.«graphModel.name.toFirstUpper»;
import de.ls5.dywa.generated.entity.Project;
import org.apache.tapestry5.EventContext;
import org.apache.tapestry5.SymbolConstants;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.ioc.annotations.Symbol;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Generated by Pyro CINCO Meta Plugin
 */
public class Pyro {

    @Property
    @Inject
    @Symbol(SymbolConstants.TAPESTRY_VERSION)
    private String tapestryVersion;

    @Property
    private Project openedProject;

    @Property
    private «graphModel.name.toFirstUpper» openedGraphModel;

    @Property
    private «graphModel.name.toFirstUpper» iteratedGraph;

    @Inject
    private ProjectController projectController;

    @Inject
    private «graphModel.name.toFirstUpper»Controller graphModelController;

     void onActivate(EventContext eventContext) {
     	if(eventContext.getCount()<=0) {
             return;
         }
        this.openedProject = this.projectController.readProject(eventContext.get(Long.class,0));
        if(eventContext.getCount()>1) {
            this.openedGraphModel = («graphModel.name.toFirstUpper») this.graphModelController.read«graphModel.name.toFirstUpper»(eventContext.get(Long.class,1));
        }
        else {
            if(!this.openedProject.getgraphModels_GraphModel().isEmpty()) {
                this.openedGraphModel = («graphModel.name.toFirstUpper») this.openedProject.getgraphModels_GraphModel().get(0);
            }
        }
        System.out.println("Opened Project " + this.openedProject.getName());
    }

    public String getGraphCreateCss() {
        return "btn btn-success btn-sm";
    }

    public boolean getIsProjectEmpty() {
        return this.openedProject.getgraphModels_GraphModel().isEmpty();
    }

    public String getActiveGraphLiCss(){
        if(this.iteratedGraph.getId() == openedGraphModel.getId()) {
            return "active";
        }
        return "";
    }

    public String getActiveGraphACss(){
        if(this.iteratedGraph.getId() == openedGraphModel.getId()) {
            return "not-active";
        }
        return "";
    }
    
    public boolean isProjectEmpty() {
        return this.openedProject.getgraphModels_GraphModel().isEmpty();
    }

    public void setContext(Project openedProject,«graphModel.name.toFirstUpper» openedGraphModel) {
        this.openedProject = openedProject;
        this.openedGraphModel = openedGraphModel;
    }
    
    public List<«graphModel.name.toFirstUpper»> getGraphs() {
        return this.openedProject.getgraphModels_GraphModel().stream().map(graphModel -> («graphModel.name.toFirstUpper») graphModel).collect(Collectors.toList());
    }
    
    public Object[] onPassivate() {
        if (this.openedGraphModel != null) {
            return new Object[]{this.openedProject.getId(),this.openedGraphModel.getId()};
        }
        else {
            return new Object[]{this.openedProject.getId()};
        }
    }


}
	
	'''
	
}