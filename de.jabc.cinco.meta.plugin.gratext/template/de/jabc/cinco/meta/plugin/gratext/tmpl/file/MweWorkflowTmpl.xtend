package de.jabc.cinco.meta.plugin.gratext.tmpl.file

import de.jabc.cinco.meta.plugin.template.FileTemplate
import java.util.Map
import java.util.Set
import mgl.GraphModel
import mgl.ModelElement
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EClassifier

class MweWorkflowTmpl extends FileTemplate {
	
	Map<String,String> genModelURIs = newHashMap
	Map<String,String> genPackages = newHashMap
	Set<String> referencedNsURIs = newHashSet
	
	String projectName
	String projectBasePackage
	
	new(String projectName, String projectBasePackage) {
		System.err.println("New MweWorkflowTmpl: " + projectName)
		this.projectName = projectName
		this.projectBasePackage = projectBasePackage
	}
	
	def targetName() '''«model.name»Gratext'''
	
	override getTargetFileName() '''«model.name»Gratext.mwe2'''
	
	override init() {
		model.importedGraphModels.forEach[
			val pkg = if (!package.nullOrEmpty) '''«package».''' else ""
			genPackages.put(nsURI,
				'''«pkg»«name.toLowerCase».«name.toLowerCase.toFirstUpper»Package''')
			genModelURIs.put(nsURI,
				'''platform:/resource/«model.projectName»/src-gen/model/«name».genmodel''')
		]
		
		model.importedGenModels.forEach[ genModel |
			genModel.genPackages.forEach[
				val pkg = if (!basePackage.nullOrEmpty) '''«basePackage».''' else ""
				genPackages.put(NSURI,
					'''«pkg»«getEcorePackage.name».«prefix»Package''')
				genModelURIs.put(NSURI,
					URI.createPlatformResourceURI(eResource.URI.toPlatformString(false), false).toString())
			]
		]
		
		referencedNsURIs += model.primeReferences.map[switch it:type {
			GraphModel: nsURI
			ModelElement: graphModel.nsURI
			EClassifier: EPackage.nsURI
		}].filter[it != model.nsURI].filterNull
	}
	
	def genPackageRule(String pkg) '''
		registerGeneratedEPackage = "«pkg»"
	'''

	def genURIRule(String uri) '''
		registerGenModelFile = "«uri»"
	'''
	
	def toPath(String pkg) {
		pkg?.replace('.', '/')
	}
	
	override template() '''
		module «package»
		
		import org.eclipse.emf.mwe.utils.*
		import org.eclipse.xtext.xtext.generator.*
		import org.eclipse.xtext.xtext.generator.model.project.*
		
		var languageName = "«projectBasePackage».«model.name»Gratext"
		var projectName = "«projectName»"
		
		Workflow {
		
			bean = StandaloneSetup {
				scanClassPath  = true
				registerGeneratedEPackage = "«projectBasePackage».«targetName»Package"
				registerGenModelFile = "platform:/resource/«projectName»/model/«projectBasePackage.toPath»/«GenmodelTmpl.getTargetFileName»"
				«referencedNsURIs.map[genPackages.get(it)].filterNull.map[genPackageRule].join('\n')»
				«referencedNsURIs.map[genModelURIs.get(it)].filterNull.map[genURIRule].join('\n')»
			}
		
			component = org.eclipse.xtext.xtext.generator.XtextGenerator {
				configuration = {
					project = StandardProjectConfig {
						baseName = projectName
						rootPath = ".."
						
						runtimeTest = {
							enabled = false
						}
						eclipsePlugin = {
							enabled = true
						}
						eclipsePluginTest = {
							enabled = false
						}
						genericIde = {
							enabled = true
							name = projectName // generate to the base project
						}
						createEclipseMetaData = true
						codeConfig = {
							preferXtendStubs = false
						}
					}
					code = {
						preferXtendStubs = false
						encoding = "UTF-8"
						lineDelimiter = "\n"
						fileHeader = "/*\n * generated by Xtext \${version}\n */"
					}
				}
				language = StandardLanguage {
					name = languageName
		
					serializer = {
						generateStub = false
					}
					validator = {
						generateStub = false
					}
					scopeProvider = {
						generateStub = true
						generateXtendStub = true
					}
					contentAssist = {
						generateStub = true
						generateXtendStub = true
					}
				}
			}
		}
	'''
	
}