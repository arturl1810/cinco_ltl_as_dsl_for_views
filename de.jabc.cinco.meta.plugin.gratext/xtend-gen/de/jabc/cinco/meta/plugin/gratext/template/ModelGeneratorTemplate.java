package de.jabc.cinco.meta.plugin.gratext.template;

import de.jabc.cinco.meta.plugin.gratext.descriptor.GraphModelDescriptor;
import de.jabc.cinco.meta.plugin.gratext.descriptor.ProjectDescriptor;
import de.jabc.cinco.meta.plugin.gratext.template.AbstractGratextTemplate;
import mgl.GraphModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ModelGeneratorTemplate extends AbstractGratextTemplate {
  public CharSequence template() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    ProjectDescriptor _project = this.project();
    String _basePackage = _project.getBasePackage();
    _builder.append(_basePackage, "");
    _builder.append(".generator");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    GraphModel _graphmodel = this.graphmodel();
    String _package = _graphmodel.getPackage();
    _builder.append(_package, "");
    _builder.append(".");
    GraphModelDescriptor _model = this.model();
    String _name = _model.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".");
    GraphModelDescriptor _model_1 = this.model();
    String _name_1 = _model_1.getName();
    _builder.append(_name_1, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    ProjectDescriptor _project_1 = this.project();
    String _basePackage_1 = _project_1.getBasePackage();
    _builder.append(_basePackage_1, "");
    _builder.append(".*");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import graphmodel.GraphModel");
    _builder.newLine();
    _builder.append("import graphmodel.ModelElement");
    _builder.newLine();
    _builder.append("import graphmodel.ModelElementContainer");
    _builder.newLine();
    _builder.append("import graphmodel.Edge");
    _builder.newLine();
    _builder.append("import graphmodel.Node");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.append("import java.util.HashMap");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import java.util.Map");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.core.runtime.IPath");
    _builder.newLine();
    _builder.append("import org.eclipse.core.runtime.Path");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.URI");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.dt.IDiagramTypeProvider");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.IFeatureProvider");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddConnectionContext");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddContext");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AreaContext");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.UpdateContext");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.ContainerShape");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Diagram");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.PictogramElement");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.Shape");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.services.Graphiti");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.ui.services.GraphitiUi");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Display");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.IFileSystemAccess");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.IGenerator");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.features.context.impl.AddBendpointContext");
    _builder.newLine();
    _builder.append("import org.eclipse.graphiti.mm.pictograms.FreeFormConnection");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    ProjectDescriptor _project_2 = this.project();
    String _targetName = _project_2.getTargetName();
    _builder.append(_targetName, "");
    _builder.append("Generator implements IGenerator {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final String FILE_EXTENSION = \"");
    GraphModel _graphmodel_1 = this.graphmodel();
    String _fileExtension = _graphmodel_1.getFileExtension();
    _builder.append(_fileExtension, "\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("final String DTP_ID = \"");
    GraphModel _graphmodel_2 = this.graphmodel();
    String _package_1 = _graphmodel_2.getPackage();
    _builder.append(_package_1, "\t");
    _builder.append(".");
    GraphModelDescriptor _model_2 = this.model();
    String _name_2 = _model_2.getName();
    _builder.append(_name_2, "\t");
    _builder.append("DiagramTypeProvider\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<ModelElement, PictogramElement> pes = new HashMap");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<_EdgeSource> edgeSources = new ArrayList");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, ModelElement> byId = new HashMap");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("GraphModel model");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Diagram diagram");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("IDiagramTypeProvider dtp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("IFeatureProvider fp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override void doGenerate(Resource resource, IFileSystemAccess fsa) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("init(resource)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("clearCache");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Display.getDefault.asyncExec[");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("model.modelElements.forEach[add]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("edgeSources.forEach[source | ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new ArrayList(source.outgoingEdges).forEach[edge | ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("add(edge, source, (edge as Edge).targetElement) ] ]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("update");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("save");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def init(Resource resource) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("model = resource.contents.get(0) as ");
    GraphModelDescriptor _model_3 = this.model();
    String _name_3 = _model_3.getName();
    _builder.append(_name_3, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("val filename = \"");
    GraphModelDescriptor _model_4 = this.model();
    String _name_4 = _model_4.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append("_\" + model.id");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("diagram = newDiagram(filename)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resource.getContents().add(diagram)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dtp = GraphitiUi.getExtensionManager().createDiagramTypeProvider(diagram, DTP_ID);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fp = dtp.featureProvider");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fp.link(diagram, model)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def process(ModelElement bo) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(ModelElement bo) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("add(bo, diagram)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(ModelElement bo, ContainerShape container) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("process(bo)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\" > add pictogram for \" + bo)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val pe = fp.addIfPossible(getAddContext(bo, container))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"   => bo.id: \" + bo.id)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"   => pe: \" + pe)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cache(bo, pe)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addChildren(bo, pe)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def addChildren(ModelElement bo, PictogramElement pe) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (bo instanceof ModelElementContainer) ");
    _builder.newLine();
    _builder.append("\t\t \t");
    _builder.append("bo.modelElements.forEach[child | add(child, pe as ContainerShape)]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(_Edge edge, _EdgeSource source, Node target) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Generator.add \" + edge)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"  > source \" + source)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"  > target \" + target)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(edge as graphmodel.Edge).sourceElement = source as graphmodel.Node");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("(edge as graphmodel.Edge).targetElement = target as graphmodel.Node");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("val pe = fp.addIfPossible(getAddContext(edge, (source as ModelElement), (target as ModelElement)))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cache((edge as ModelElement), pe)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("add(edge.route, pe)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(_Route route, PictogramElement pe) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (route != null && route.points != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (var i=0; i < route.points.size; i++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("add(route.points.get(i), (pe as FreeFormConnection), i)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def add(_Point p, FreeFormConnection connection, int index) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val ctx = new AddBendpointContext(connection, p.x, p.y, index)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dtp.diagramBehavior.executeFeature(fp.getAddBendpointFeature(ctx), ctx);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def getAddContext(ModelElement bo, ContainerShape target) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val place = getPlacement(bo)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val ctx = new AddContext(new AreaContext, bo)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctx.targetContainer = target");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctx.x = place.x");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctx.y = place.y");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctx.width = place.width");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ctx.height = place.height");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ctx");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def getAddContext(_Edge edge, ModelElement source, ModelElement target) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val ctx = new AddConnectionContext(getAnchor(pes.get(source)), getAnchor(pes.get(target)))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ctx.setNewObject(edge)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ctx");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def getAnchor(PictogramElement pe) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (pe as Shape).anchors.get(0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def cache(ModelElement bo, PictogramElement pe) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("byId.put(bo.id, bo)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pes.put(bo, pe)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (bo instanceof _EdgeSource)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("edgeSources.add(bo)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def clearCache() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("byId.clear");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pes.clear");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("edgeSources.clear");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def update() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val ctx = new UpdateContext(diagram);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val feature = fp.getUpdateFeature(ctx);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (feature.canUpdate(ctx)) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("feature.update(ctx);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def save() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val res = createResource(new Path(\"Project/src-gen/\"), \"");
    GraphModelDescriptor _model_5 = this.model();
    String _name_5 = _model_5.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append("_\" + model.id, FILE_EXTENSION)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("addToResource(res, diagram, model)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("res.save(null)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def createResource(IPath path, String fileName, String fileExtension) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val filePath = path.append(fileName).addFileExtension(fileExtension)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val uri = URI.createPlatformResourceURI(filePath.toOSString(), true)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ResourceSetImpl().createResource(uri)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def addToResource(Resource res, EObject... objs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("objs.forEach[obj | res.contents.add(obj)]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def newDiagram(String filename) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Graphiti.getPeCreateService().createDiagram(\"");
    GraphModelDescriptor _model_6 = this.model();
    String _name_6 = _model_6.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append("\", filename, true)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def newFeatureProvider(Diagram diagram) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return GraphitiUi.getExtensionManager().createFeatureProvider(diagram)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def getPlacement() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getPlacement(null as _Placement)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def getPlacement(ModelElement element) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (element instanceof _Placed)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getPlacement((element as _Placed).placement)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getPlacement");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def getPlacement(_Placement placement) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val plm = ");
    ProjectDescriptor _project_3 = this.project();
    String _targetName_1 = _project_3.getTargetName();
    _builder.append(_targetName_1, "\t\t");
    _builder.append("Factory.eINSTANCE.create_Placement");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (placement != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (placement.x != 0) plm.x = placement.x");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (placement.y != 0) plm.y = placement.y");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (placement.width >= 0) plm.width = placement.width");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (placement.height >= 0) plm.height = placement.height");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return plm;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
