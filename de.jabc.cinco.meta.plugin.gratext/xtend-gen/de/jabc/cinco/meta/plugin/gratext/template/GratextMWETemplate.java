package de.jabc.cinco.meta.plugin.gratext.template;

import de.jabc.cinco.meta.plugin.gratext.descriptor.FileDescriptor;
import de.jabc.cinco.meta.plugin.gratext.descriptor.ProjectDescriptor;
import de.jabc.cinco.meta.plugin.gratext.template.AbstractGratextTemplate;
import de.jabc.cinco.meta.plugin.gratext.template.GratextGenmodelTemplate;
import de.jabc.cinco.meta.plugin.gratext.template.GratextGrammarTemplate;
import mgl.GraphModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class GratextMWETemplate extends AbstractGratextTemplate {
  public FileDescriptor xtextFile() {
    return this.fileFromTemplate(GratextGrammarTemplate.class);
  }
  
  public FileDescriptor genmodelFile() {
    return this.fileFromTemplate(GratextGenmodelTemplate.class);
  }
  
  public CharSequence template() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module ");
    ProjectDescriptor _project = this.project();
    String _basePackage = _project.getBasePackage();
    _builder.append(_basePackage, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.mwe.utils.*");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.*");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.ui.generator.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("var grammarURI = \"classpath:/");
    FileDescriptor _xtextFile = this.xtextFile();
    String _srcFolderRelativeDir = _xtextFile.getSrcFolderRelativeDir();
    _builder.append(_srcFolderRelativeDir, "");
    _builder.append("/");
    FileDescriptor _xtextFile_1 = this.xtextFile();
    String _name = _xtextFile_1.getName();
    _builder.append(_name, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("var fileExtensions = \"");
    GraphModel _graphmodel = this.graphmodel();
    String _fileExtension = _graphmodel.getFileExtension();
    _builder.append(_fileExtension, "");
    _builder.append("DL\"");
    _builder.newLineIfNotEmpty();
    _builder.append("var projectName = \"");
    ProjectDescriptor _project_1 = this.project();
    String _basePackage_1 = _project_1.getBasePackage();
    _builder.append(_basePackage_1, "");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("var runtimeProject = \"../${projectName}\"");
    _builder.newLine();
    _builder.append("var generateXtendStub = true");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("Workflow { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("bean = StandaloneSetup {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("scanClassPath  = true");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("platformUri = \"${runtimeProject}/..\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("registerGeneratedEPackage = \"");
    ProjectDescriptor _project_2 = this.project();
    String _basePackage_2 = _project_2.getBasePackage();
    _builder.append(_basePackage_2, "\t\t");
    _builder.append(".");
    ProjectDescriptor _project_3 = this.project();
    String _targetName = _project_3.getTargetName();
    _builder.append(_targetName, "\t\t");
    _builder.append("Package\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("registerGenModelFile = \"platform:/resource/");
    ProjectDescriptor _project_4 = this.project();
    String _symbolicName = _project_4.getSymbolicName();
    _builder.append(_symbolicName, "\t\t");
    _builder.append("/model/");
    ProjectDescriptor _project_5 = this.project();
    String _basePackageDir = _project_5.getBasePackageDir();
    _builder.append(_basePackageDir, "\t\t");
    _builder.append("/");
    FileDescriptor _genmodelFile = this.genmodelFile();
    String _name_1 = _genmodelFile.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("component = DirectoryCleaner {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("directory = \"${runtimeProject}/src-gen\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("component = DirectoryCleaner {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("directory = \"${runtimeProject}.ui/src-gen\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("component = Generator {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pathRtProject = runtimeProject");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pathUiProject = \"${runtimeProject}.ui\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("projectNameRt = projectName");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("projectNameUi = \"${projectName}.ui\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("language = auto-inject {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("uri = grammarURI");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Java API to access grammar elements (required by several other fragments)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = grammarAccess.GrammarAccessFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// generates Java API for the generated EPackages");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = ecore.EcoreGeneratorFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// the Ecore2Xtext specific terminal converter");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// serializer 2.0");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = serializer.SerializerFragment auto-inject {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//generateStub = false");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// the old serialization component");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// a custom ResourceFactory for use with EMF ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = resourceFactory.ResourceFactoryFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// the Antlr parser");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("options = {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("classSplitting = true");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Xtend-based API for validation ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = validation.ValidatorFragment auto-inject {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// composedCheck = \"org.eclipse.xtext.validation.ImportUriValidator\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// composedCheck = \"org.eclipse.xtext.validation.NamesAreUniqueValidator\"");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// old scoping and exporting API ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = scoping.ImportNamespacesScopingFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = exporting.QualifiedNamesFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// scoping and exporting API");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = scoping.ImportURIScopingFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = exporting.SimpleNamesFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = builder.BuilderIntegrationFragment auto-inject {}\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// generator API");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = generator.GeneratorFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// formatter API ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = formatting.FormatterFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = ecore2xtext.FormatterFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// labeling API ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = labeling.LabelProviderFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// outline API ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fragment = outline.OutlineTreeProviderFragment auto-inject {}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fragment = outline.QuickOutlineFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// quickfix API");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = quickfix.QuickfixProviderFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//content assist API ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = contentAssist.ContentAssistFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// antlr parser generator tailored for content assist ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("options = {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("classSplitting = true");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// generates junit test support classes into Generator#pathTestProject");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = junit.Junit4Fragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// project wizard (optional) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//\t\tgeneratorProjectName = \"${projectName}.generator\" ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// rename refactoring");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = refactoring.RefactorElementNameFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// provides the necessary bindings for java types integration");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = types.TypesGeneratorFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// generates the required bindings only if the grammar inherits from Xbase");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = xbase.XbaseGeneratorFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// generates the required bindings only if the grammar inherits from Xtype");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = xbase.XtypeGeneratorFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// provides a preference page for template proposals");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fragment = templates.CodetemplatesGeneratorFragment auto-inject {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// provides a compare view");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fragment = compare.CompareFragment auto-inject {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
