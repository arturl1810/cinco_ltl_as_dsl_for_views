package de.jabc.cinco.meta.plugin.gratext.template;

import de.jabc.cinco.meta.plugin.gratext.descriptor.FileDescriptor;
import de.jabc.cinco.meta.plugin.gratext.descriptor.ProjectDescriptor;
import de.jabc.cinco.meta.plugin.gratext.template.AbstractGratextTemplate;
import de.jabc.cinco.meta.plugin.gratext.template.GratextQualifiedNameProviderTemplate;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class RuntimeModuleTemplate extends AbstractGratextTemplate {
  public FileDescriptor providerFile() {
    return this.fileFromTemplate(GratextQualifiedNameProviderTemplate.class);
  }
  
  public CharSequence template() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    ProjectDescriptor _project = this.project();
    String _basePackage = _project.getBasePackage();
    _builder.append(_basePackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.naming.IQualifiedNameProvider;");
    _builder.newLine();
    _builder.append("import ");
    FileDescriptor _providerFile = this.providerFile();
    String _package = _providerFile.getPackage();
    _builder.append(_package, "");
    _builder.append(".");
    FileDescriptor _providerFile_1 = this.providerFile();
    String _nameWithoutExtension = _providerFile_1.getNameWithoutExtension();
    _builder.append(_nameWithoutExtension, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import graphmodel.Edge;");
    _builder.newLine();
    _builder.append("import graphmodel.Node;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.notify.Adapter;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.notify.Notification;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.notify.impl.AdapterImpl;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EReference;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.conversion.ValueConverterException;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.naming.IQualifiedNameProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.nodemodel.INode;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.parser.DefaultEcoreElementFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.parser.IAstFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    ProjectDescriptor _project_1 = this.project();
    String _targetName = _project_1.getTargetName();
    _builder.append(_targetName, "");
    _builder.append("RuntimeModule extends ");
    ProjectDescriptor _project_2 = this.project();
    String _basePackage_1 = _project_2.getBasePackage();
    _builder.append(_basePackage_1, "");
    _builder.append(".Abstract");
    ProjectDescriptor _project_3 = this.project();
    String _targetName_1 = _project_3.getTargetName();
    _builder.append(_targetName_1, "");
    _builder.append("RuntimeModule {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    FileDescriptor _providerFile_2 = this.providerFile();
    String _nameWithoutExtension_1 = _providerFile_2.getNameWithoutExtension();
    _builder.append(_nameWithoutExtension_1, "\t\t");
    _builder.append(".class;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Class<? extends IAstFactory> bindIAstFactory() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return MyAstFactory.class;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static public class MyAstFactory extends DefaultEcoreElementFactory {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void add(EObject object, String feature, Object value, String ruleName, INode node) throws ValueConverterException {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (node.getSemanticElement() instanceof Edge) try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Edge edge = (Edge) node.getSemanticElement();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Node source = (Node) node.getParent().getSemanticElement();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("edge.setSourceElement(source);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t    \t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super.add(object, feature, value, ruleName, node);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
