<?xml version="1.0" encoding="ISO-8859-1"?>
<model version="2.1">
  <id>67a73b2a-3824-4776-9686-ae1a8aed5282</id>
  <name>GenerateCopyPasteFeatures</name>
  <changecounter>240</changecounter>
  <sib>
    <id>59a427e8-25c5-482c-a32b-a0aa278eb41b</id>
    <name>PutExpression</name>
    <label>LocalPkgName</label>
    <sib-uid>basic-sibs/PutExpression</sib-uid>
    <taxonomy>de.jabc.sib.common.basic.PutExpression</taxonomy>
    <position>39.5,48.0</position>
    <parameter name="resolve">
      <boolean>true</boolean>
    </parameter>
    <parameter name="value">
      <de.metaframe.common.sib.parameter.ContextExpression>
        <ContextExpressionFoundation>
          <expression>${packageName}.graphiti.features</expression>
          <clazz>java.lang.Object</clazz>
          <classMutable>true</classMutable>
        </ContextExpressionFoundation>
      </de.metaframe.common.sib.parameter.ContextExpression>
    </parameter>
    <parameter name="variable">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>localPkgName</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
    <userobject key="ABC$START">
      <boolean>true</boolean>
    </userobject>
  </sib>
  <sib>
    <id>5fb9d5ed-29f7-49c6-885e-d21af9361340</id>
    <name>PutExpression_1</name>
    <label>ClassName</label>
    <sib-uid>basic-sibs/PutExpression</sib-uid>
    <taxonomy>de.jabc.sib.common.basic.PutExpression</taxonomy>
    <position>50.5,168.0</position>
    <parameter name="resolve">
      <boolean>true</boolean>
    </parameter>
    <parameter name="value">
      <de.metaframe.common.sib.parameter.ContextExpression>
        <ContextExpressionFoundation>
          <expression>${graphModelName}CopyFeature</expression>
          <clazz>java.lang.Object</clazz>
          <classMutable>true</classMutable>
        </ContextExpressionFoundation>
      </de.metaframe.common.sib.parameter.ContextExpression>
    </parameter>
    <parameter name="variable">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>className</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>59a427e8-25c5-482c-a32b-a0aa278eb41b</source>
    <target>5fb9d5ed-29f7-49c6-885e-d21af9361340</target>
    <point>90.0,75.0</point>
    <point>84.0,209.0</point>
    <branch>default</branch>
  </edge>
  <sib>
    <id>e1354f1f-6e52-44d9-8ccd-716d6ee62744</id>
    <name>RunStringTemplate</name>
    <label>CopyFeature</label>
    <sib-uid>script-sibs/RunStringTemplate</sib-uid>
    <taxonomy>de.jabc.sib.common.script.RunStringTemplate</taxonomy>
    <position>45.0,288.0</position>
    <parameter name="append">
      <boolean>true</boolean>
    </parameter>
    <parameter name="individualVariables">
      <boolean>false</boolean>
    </parameter>
    <parameter name="result">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>copyFeatureContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="template">
      <string>package $context.localPkgName$;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import graphmodel.*;

import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.ICopyContext;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.ui.features.AbstractCopyFeature;

public class $context.graphModelName$CopyFeature extends AbstractCopyFeature {

	public $context.graphModelName$CopyFeature(IFeatureProvider fp) {
		super(fp);
	}

	@Override
	public boolean canCopy(ICopyContext context) {
		PictogramElement[] pes = context.getPictogramElements();
		if (pes == null || pes.length == 0)
			return false;
		return true;
		
	}

	@Override
	public void copy(ICopyContext context) {
		PictogramElement[] pes = context.getPictogramElements();
		Set&lt;PictogramElement&gt; copiedSubGraph = new HashSet&lt;&gt;();
		List&lt;PictogramElement&gt; subGraphElements = getSubGraph(pes);

		copiedSubGraph = $context.graphModelName$CopyUtils.copy(subGraphElements, getDiagram());
		
		putToClipboard(copiedSubGraph.toArray(new Object[copiedSubGraph.size()]));
	}

	private List&lt;PictogramElement&gt; getSubGraph(PictogramElement[] pes) {
		ArrayList&lt;PictogramElement&gt; list = new ArrayList&lt;&gt;();
		HashMap&lt;ModelElement, Object&gt; map = new HashMap&lt;&gt;();
		List&lt;Edge&gt; edges = new ArrayList&lt;Edge&gt;();
		for (PictogramElement pe : pes) {
			Object bo = getBusinessObjectForPictogramElement(pe);
			if (bo instanceof Node) {
				Node node = (Node) bo;
				list.add(pe);
				map.put(node, true);
				for (Edge e : node.getIncoming())
					edges.add(e);
				for (Edge e : node.getOutgoing())
					edges.add(e);
			}
			
			if (bo instanceof Container) {
				Container container = (Container) bo;
				list.add(pe);
				map.put(container, true);
				for (Edge e : container.getIncoming())
					edges.add(e);
				for (Edge e : container.getOutgoing())
					edges.add(e);
			}
			
			if (bo instanceof Edge)
				edges.add((Edge) bo);
		}
		
		for (Edge e : edges) {
			Object e1 = map.get(e.getSourceElement());
			Object e2 = map.get(e.getTargetElement());
			if (e1 != null &amp;&amp; e2 != null) {
				if (!list.contains(Graphiti.getLinkService().getPictogramElements(getDiagram(), e).get(0)))
					list.add(Graphiti.getLinkService().getPictogramElements(getDiagram(), e).get(0));
			}
		}
		return list;
	}

	private void removeMissingLinks(Container container, List&lt;ModelElement&gt; remove) {
		for (ModelElement me : container.getModelElements()) {
			if (me instanceof Edge) {
				Edge e = (Edge) me;
				if (e.getSourceElement() == null || e.getTargetElement() == null) 
					remove.add(e);
			}
			if (me instanceof Container) {
				removeMissingLinks((Container) me, remove);
			}
		}
	}

}
</string>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>5fb9d5ed-29f7-49c6-885e-d21af9361340</source>
    <target>e1354f1f-6e52-44d9-8ccd-716d6ee62744</target>
    <point>90.0,195.0</point>
    <point>85.0,300.0</point>
    <branch>default</branch>
  </edge>
  <sib>
    <id>8aa0a1dd-fd90-4abc-a2e9-ff882536ad38</id>
    <name>RunStringTemplate_1</name>
    <label>PasteFeature</label>
    <sib-uid>script-sibs/RunStringTemplate</sib-uid>
    <taxonomy>de.jabc.sib.common.script.RunStringTemplate</taxonomy>
    <position>43.0,648.0</position>
    <parameter name="append">
      <boolean>true</boolean>
    </parameter>
    <parameter name="individualVariables">
      <boolean>false</boolean>
    </parameter>
    <parameter name="result">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>pasteFeatureContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="template">
      <string>package $context.localPkgName$;

import graphmodel.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.graphiti.features.IAddFeature;
import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.IPasteContext;
import org.eclipse.graphiti.features.context.impl.AddConnectionContext;
import org.eclipse.graphiti.features.context.impl.AddContext;
import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
import org.eclipse.graphiti.mm.algorithms.styles.Point;
import org.eclipse.graphiti.mm.pictograms.Anchor;
import org.eclipse.graphiti.mm.pictograms.AnchorContainer;
import org.eclipse.graphiti.mm.pictograms.Connection;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.FreeFormConnection;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.ui.features.AbstractPasteFeature;

import $context.projectName$.*;
import $context.importPath$.*;

public class $context.graphModelName$PasteFeature extends AbstractPasteFeature {

	private Integer xMin = null;
	private Integer yMin = null;
	
	private int xContext, yContext;
	
	public $context.graphModelName$PasteFeature(IFeatureProvider fp) {
		super(fp);
		// TODO Auto-generated constructor stub
	}

		@Override
	public boolean canPaste(IPasteContext context) {
		PictogramElement[] pes = context.getPictogramElements();
		if (pes == null || pes.length != 1) 
			return false;
		Object bo = getBusinessObjectForPictogramElement(pes[0]);
		if (!(bo instanceof $context.graphModelName$) &amp;&amp; !(bo instanceof Container))
			return false;
		
		Object[] bos = getFromClipboard();
		if (bos == null || bos.length == 0)
			return false;
		for (Object pe : bos) {
			Object o = ((PictogramElement) pe).getLink().getBusinessObjects().get(0);
			if (!canPaste(o, bo)) {
				return false;
			}
		}
		return true;
	}

	@Override
	public void paste(IPasteContext context) {
		xContext = context.getX();
		yContext = context.getY();
		List&lt;PictogramElement&gt; subGraph = createList(getFromClipboard());
		Set&lt;PictogramElement&gt; copies = new HashSet&lt;&gt;(); 
		computeUpperLeft(subGraph.toArray());
		copies = $context.graphModelName$CopyUtils.copy(subGraph, getDiagram());
		
		List&lt;PictogramElement&gt; graphicalContainer = new ArrayList&lt;&gt;();
		List&lt;Connection&gt; connections = new ArrayList&lt;&gt;();
		
		for (PictogramElement pe : copies) {
			if (pe instanceof Connection &amp;&amp; !connections.contains(pe)) {
				translate(pe);
				connections.add((Connection) pe);
			}
			
			if (pe instanceof Shape &amp;&amp; !graphicalContainer.contains(pe)) {
				translate(pe);
				graphicalContainer.add(pe);
			}
		}
		
		PictogramElement target = context.getPictogramElements()[0];
		ContainerShape container = null;
		
		if (target instanceof ContainerShape)
			container = (ContainerShape) target;
		if (container == null)
			return;
		ContainingElement model = (ContainingElement) getBusinessObjectForPictogramElement(container);
		for (PictogramElement pe : graphicalContainer) {
			container.getChildren().add((Shape) pe);
			model.getModelElements().add((ModelElement) pe.getLink().getBusinessObjects().get(0));
			addLinks(getDiagram(), pe);
		}
		for (Connection pe : connections) {
			getDiagram().getConnections().add((Connection) pe);
			getDiagram().getPictogramLinks().add(pe.getLink());
			if (pe.getLink().getBusinessObjects().get(0) instanceof Edge) {
				Edge e = (Edge) pe.getLink().getBusinessObjects().get(0);
				ContainingElement common = $context.graphModelName$GraphitiUtils.getInstance().getCommonContainer(model, e);
				model.getModelElements().remove(e);
				common.getModelElements().add(e);
			}
		}

	}

	private void addLinks(Diagram diagram, PictogramElement pe) {
		if (pe instanceof ContainerShape) {
			for (Shape s : ((ContainerShape) pe).getChildren()) {
				if (s.getLink() != null &amp;&amp; !diagram.getPictogramLinks().contains(s.getLink()))
					diagram.getPictogramLinks().add(s.getLink());
				addLinks(diagram, s);
			}
		}
		
	}
	
	private boolean canPaste(Object bo, Object target) {
		$context.pasteContent$

		if (bo instanceof Edge)
			return true;
		return false;
	}

	private void computeUpperLeft(Object[] bos) {
		xMin = null;
		yMin = null;
		for (Object bo : bos) {
			if (bo instanceof Shape) {
				GraphicsAlgorithm ga = ((PictogramElement) bo).getGraphicsAlgorithm();

				if (xMin == null) xMin = ga.getX();
				if (yMin == null) yMin = ga.getY();
				
				xMin = Math.min(xMin, ga.getX());
				yMin = Math.min(yMin, ga.getY());
				
			}
			
		}
		
		if (xMin == null) xMin = 0;
		if (yMin == null) yMin = 0;
		
	}

	private void translate(PictogramElement pe) {
		if (pe instanceof Connection) {
			translateConnection((Connection) pe);
		} else {
			GraphicsAlgorithm ga =  pe.getGraphicsAlgorithm();
			ga.setX(xContext + (ga.getX() - xMin));
			ga.setY(yContext + (ga.getY() - yMin));
		}
	}
	
	private void translateConnection(Connection c) {
		if (c instanceof FreeFormConnection) {
			FreeFormConnection ffc = (FreeFormConnection) c;
			for (Point p : ffc.getBendpoints()) {
				p.setX(xContext + (p.getX() - xMin));
				p.setY(yContext + (p.getY() - yMin));
			}
		}
	}
	
	private List&lt;PictogramElement&gt; createList(Object[] fromClipboard) {
		List&lt;PictogramElement&gt; pes = new ArrayList&lt;&gt;();
		for (Object o : fromClipboard) {
			if (o instanceof PictogramElement)
				pes.add((PictogramElement) o);
		}
		return pes;
	}
	
}
</string>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <sib>
    <id>5309ab68-80ac-4a7c-9ec0-be9b0ae6d65e</id>
    <name>WriteJavaFile</name>
    <label>WriteCopyFeature</label>
    <sib-uid>genesys-sibs/WriteJavaFile</sib-uid>
    <taxonomy>de.jabc.sib.genesys.WriteJavaFile</taxonomy>
    <position>27.5,408.0</position>
    <parameter name="baseDirectory">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>outletPath</key>
          <scope>GLOBAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="beautify">
      <boolean>false</boolean>
    </parameter>
    <parameter name="beautifyMethod">
      <de.metaframe.common.sib.parameter.ListBox>
        <ListBoxFoundation>
          <list>
            <string>Eclipse</string>
            <string>Jalopy</string>
          </list>
          <selected>0</selected>
        </ListBoxFoundation>
      </de.metaframe.common.sib.parameter.ListBox>
    </parameter>
    <parameter name="className">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>className</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="fileContent">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>copyFeatureContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="packageName">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>localPkgName</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>e1354f1f-6e52-44d9-8ccd-716d6ee62744</source>
    <target>5309ab68-80ac-4a7c-9ec0-be9b0ae6d65e</target>
    <point>90.0,315.0</point>
    <point>91.0,433.0</point>
    <branch>default</branch>
  </edge>
  <sib>
    <id>9b993eaa-4198-4e0c-935b-27f234bb5373</id>
    <name>PutExpression_2</name>
    <label>ClassName</label>
    <sib-uid>basic-sibs/PutExpression</sib-uid>
    <taxonomy>de.jabc.sib.common.basic.PutExpression</taxonomy>
    <position>50.5,528.0</position>
    <parameter name="resolve">
      <boolean>true</boolean>
    </parameter>
    <parameter name="value">
      <de.metaframe.common.sib.parameter.ContextExpression>
        <ContextExpressionFoundation>
          <expression>${graphModelName}PasteFeature</expression>
          <clazz>java.lang.Object</clazz>
          <classMutable>true</classMutable>
        </ContextExpressionFoundation>
      </de.metaframe.common.sib.parameter.ContextExpression>
    </parameter>
    <parameter name="variable">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>className</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <sib>
    <id>af959c41-0db9-47da-820e-4cb97cab5b39</id>
    <name>WriteJavaFile_1</name>
    <label>WriteJavaFile</label>
    <sib-uid>genesys-sibs/WriteJavaFile</sib-uid>
    <taxonomy>de.jabc.sib.genesys.WriteJavaFile</taxonomy>
    <position>43.0,783.0</position>
    <parameter name="baseDirectory">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>outletPath</key>
          <scope>GLOBAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="beautify">
      <boolean>false</boolean>
    </parameter>
    <parameter name="beautifyMethod">
      <de.metaframe.common.sib.parameter.ListBox>
        <ListBoxFoundation>
          <list>
            <string>Eclipse</string>
            <string>Jalopy</string>
          </list>
          <selected>0</selected>
        </ListBoxFoundation>
      </de.metaframe.common.sib.parameter.ListBox>
    </parameter>
    <parameter name="className">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>className</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="fileContent">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>pasteFeatureContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="packageName">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>localPkgName</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>5309ab68-80ac-4a7c-9ec0-be9b0ae6d65e</source>
    <target>9b993eaa-4198-4e0c-935b-27f234bb5373</target>
    <point>90.0,435.0</point>
    <point>100.0,531.0</point>
    <branch>default</branch>
  </edge>
  <edge>
    <source>9b993eaa-4198-4e0c-935b-27f234bb5373</source>
    <target>aa92bfe4-ce39-4f48-9ba1-2db17c3b8f9e</target>
    <point>108.0,557.9076923076923</point>
    <point>267.0,655.7538461538462</point>
    <labelposition>500.0,0.0</labelposition>
    <branch>default</branch>
  </edge>
  <edge>
    <source>8aa0a1dd-fd90-4abc-a2e9-ff882536ad38</source>
    <target>af959c41-0db9-47da-820e-4cb97cab5b39</target>
    <point>90.0,660.0</point>
    <point>83.0,764.0</point>
    <branch>default</branch>
  </edge>
  <sib>
    <id>aa92bfe4-ce39-4f48-9ba1-2db17c3b8f9e</id>
    <name>IterateElements</name>
    <label>IterateNodes</label>
    <sib-uid>collection-sibs/IterateElements</sib-uid>
    <taxonomy>de.jabc.sib.common.collection.IterateElements</taxonomy>
    <position>299.5,528.0</position>
    <parameter name="collection">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>nodes</key>
          <scope>GLOBAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="element">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>modelElement</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="iterator">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>iteratorfoobar</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>error</finalbranches>
    <finalbranches>exit</finalbranches>
    <finalbranches>next</finalbranches>
  </sib>
  <sib>
    <id>c7a9f388-11af-49f4-b686-2513289d8601</id>
    <name>IterateElements_1</name>
    <label>IterateContainer</label>
    <sib-uid>collection-sibs/IterateElements</sib-uid>
    <taxonomy>de.jabc.sib.common.collection.IterateElements</taxonomy>
    <position>483.0,528.0</position>
    <parameter name="collection">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>containers</key>
          <scope>GLOBAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="element">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>modelElement</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="iterator">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>containeriterator</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>error</finalbranches>
    <finalbranches>exit</finalbranches>
    <finalbranches>next</finalbranches>
  </sib>
  <sib>
    <id>b4f20ed1-1e2f-4749-b0ec-28cf10fd36fb</id>
    <name>MacroSIB</name>
    <label>GenerateCheckContainer</label>
    <sib-uid>c0a80801:2d383935393038373037:1172579262297</sib-uid>
    <taxonomy>de.metaframe.jabc.sib.MacroSIB</taxonomy>
    <position>260.5,316.0</position>
    <parameter name="ClearContent">
      <de.metaframe.common.sib.parameter.ContextExpression>
        <ContextExpressionFoundation>
          <expression>${true}</expression>
          <clazz>java.lang.Boolean</clazz>
          <classMutable>false</classMutable>
        </ContextExpressionFoundation>
      </de.metaframe.common.sib.parameter.ContextExpression>
    </parameter>
    <parameter name="ModelElementKey">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>modelElement</key>
          <scope>DECLARED</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
    <userobject key="ABC$GRAPHSIB$MODELID">
      <string>4ac25e32-ae6b-469a-b78c-1764aa97ce4d</string>
    </userobject>
    <userobject key="ABC$GRAPHSIB$MODELNAME">
      <string>GenerateCheckContainer</string>
    </userobject>
  </sib>
  <sib>
    <id>089f251a-81b3-4412-ba06-537e8677d433</id>
    <name>MacroSIB_1</name>
    <label>GenerateCheckContainer</label>
    <sib-uid>c0a80801:2d383935393038373037:1172579262297</sib-uid>
    <taxonomy>de.metaframe.jabc.sib.MacroSIB</taxonomy>
    <position>455.5,316.0</position>
    <parameter name="ClearContent">
      <de.metaframe.common.sib.parameter.ContextExpression>
        <ContextExpressionFoundation>
          <expression>${true}</expression>
          <clazz>java.lang.Boolean</clazz>
          <classMutable>false</classMutable>
        </ContextExpressionFoundation>
      </de.metaframe.common.sib.parameter.ContextExpression>
    </parameter>
    <parameter name="ModelElementKey">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>modelElement</key>
          <scope>DECLARED</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
    <userobject key="ABC$GRAPHSIB$MODELID">
      <string>4ac25e32-ae6b-469a-b78c-1764aa97ce4d</string>
    </userobject>
    <userobject key="ABC$GRAPHSIB$MODELNAME">
      <string>GenerateCheckContainer</string>
    </userobject>
  </sib>
  <edge>
    <source>c7a9f388-11af-49f4-b686-2513289d8601</source>
    <target>089f251a-81b3-4412-ba06-537e8677d433</target>
    <spline/>
    <point>525.0,528.0</point>
    <point>525.0,356.0</point>
    <labelposition>549.4784594408119,1.4085373397061813</labelposition>
    <branch>next</branch>
  </edge>
  <edge>
    <source>089f251a-81b3-4412-ba06-537e8677d433</source>
    <target>6303c061-3cd9-4d1b-8541-8220fdec7b36</target>
    <point>506.8181818181818,356.0</point>
    <point>453.0,409.8</point>
    <labelposition>500.0,0.0</labelposition>
    <branch>default</branch>
  </edge>
  <edge>
    <source>aa92bfe4-ce39-4f48-9ba1-2db17c3b8f9e</source>
    <target>c7a9f388-11af-49f4-b686-2513289d8601</target>
    <point>345.0,555.0</point>
    <point>499.0,551.0</point>
    <branch>exit</branch>
  </edge>
  <edge>
    <source>c7a9f388-11af-49f4-b686-2513289d8601</source>
    <target>8aa0a1dd-fd90-4abc-a2e9-ff882536ad38</target>
    <point>525.0,555.0</point>
    <point>101.0,678.0</point>
    <branch>exit</branch>
  </edge>
  <sib>
    <id>64b170ea-ca16-40c7-a22a-a8bb50df1fda</id>
    <name>RunStringTemplate_2</name>
    <label>PasteContent</label>
    <sib-uid>script-sibs/RunStringTemplate</sib-uid>
    <taxonomy>de.jabc.sib.common.script.RunStringTemplate</taxonomy>
    <position>192.5,423.0</position>
    <parameter name="append">
      <boolean>true</boolean>
    </parameter>
    <parameter name="individualVariables">
      <boolean>false</boolean>
    </parameter>
    <parameter name="result">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>pasteContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="template">
      <string>if (bo instanceof $context.modelElement.name$) {
	$context.containerCheck$
}

</string>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <sib>
    <id>6303c061-3cd9-4d1b-8541-8220fdec7b36</id>
    <name>RunStringTemplate_3</name>
    <label>PasteContent</label>
    <sib-uid>script-sibs/RunStringTemplate</sib-uid>
    <taxonomy>de.jabc.sib.common.script.RunStringTemplate</taxonomy>
    <position>402.5,423.0</position>
    <parameter name="append">
      <boolean>true</boolean>
    </parameter>
    <parameter name="individualVariables">
      <boolean>false</boolean>
    </parameter>
    <parameter name="result">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>pasteContent</key>
          <scope>DECLARED</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="template">
      <string>if (bo instanceof $context.modelElement.name$) {
	$context.containerCheck$
}

</string>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>6303c061-3cd9-4d1b-8541-8220fdec7b36</source>
    <target>c7a9f388-11af-49f4-b686-2513289d8601</target>
    <point>465.0,435.0</point>
    <point>514.0,537.0</point>
    <branch>default</branch>
  </edge>
  <edge>
    <source>aa92bfe4-ce39-4f48-9ba1-2db17c3b8f9e</source>
    <target>b4f20ed1-1e2f-4749-b0ec-28cf10fd36fb</target>
    <point>345.0,528.0</point>
    <point>345.0,356.0</point>
    <labelposition>500.0,0.0</labelposition>
    <branch>next</branch>
  </edge>
  <edge>
    <source>b4f20ed1-1e2f-4749-b0ec-28cf10fd36fb</source>
    <target>64b170ea-ca16-40c7-a22a-a8bb50df1fda</target>
    <point>326.57894736842104,356.0</point>
    <point>258.0,424.54285714285714</point>
    <branch>default</branch>
  </edge>
  <edge>
    <source>64b170ea-ca16-40c7-a22a-a8bb50df1fda</source>
    <target>aa92bfe4-ce39-4f48-9ba1-2db17c3b8f9e</target>
    <point>240.0,450.0</point>
    <point>333.0,535.0</point>
    <branch>default</branch>
  </edge>
  <sib>
    <id>b53373be-d920-4138-88c9-26741aac0c37</id>
    <name>RunStringTemplate_4</name>
    <label>CopyUtils</label>
    <sib-uid>script-sibs/RunStringTemplate</sib-uid>
    <taxonomy>de.jabc.sib.common.script.RunStringTemplate</taxonomy>
    <position>205.5,783.0</position>
    <parameter name="append">
      <boolean>true</boolean>
    </parameter>
    <parameter name="individualVariables">
      <boolean>false</boolean>
    </parameter>
    <parameter name="result">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>copyUtilsContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="template">
      <string>package $context.localPkgName$;

import graphmodel.Container;
import graphmodel.Edge;
import graphmodel.ModelElement;
import graphmodel.Node;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.graphiti.mm.pictograms.Anchor;
import org.eclipse.graphiti.mm.pictograms.AnchorContainer;
import org.eclipse.graphiti.mm.pictograms.Connection;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.PictogramElement;
import org.eclipse.graphiti.mm.pictograms.PictogramLink;
import org.eclipse.graphiti.mm.pictograms.PictogramsFactory;
import org.eclipse.graphiti.mm.pictograms.Shape;

public class $context.graphModelName$CopyUtils {

	private static HashMap&lt;Anchor, Anchor&gt; copiedAnchors = new HashMap&lt;&gt;();
	private static HashMap&lt;EObject, EObject&gt; copiedBos = new HashMap&lt;&gt;();
	

	public static Set&lt;PictogramElement&gt; copy(List&lt;PictogramElement&gt; subGraph, Diagram diagram) {
		Set&lt;PictogramElement&gt; copyList = new HashSet&lt;&gt;();
		
		List&lt;Shape&gt; shapes = new ArrayList&lt;&gt;();
		Set&lt;Connection&gt; connections = new HashSet&lt;&gt;();
		
		copiedAnchors.clear();
		copiedBos.clear();
		
		for (PictogramElement pe : subGraph) {
			if (pe instanceof Connection) {
				connections.add((Connection) pe);
				
			}
			else shapes.add((Shape) pe);
			
			for (Connection c : diagram.getConnections()) {
				if (isCopied(c, subGraph))
					connections.add(c);
			}
		}
		
		for (Shape s : shapes) {
			EObject bo = (EObject) s.getLink().getBusinessObjects().get(0);
			Shape copy = null;
			if (bo instanceof Container) {
				copy = copyContainerShape((ContainerShape) s);
			}
			
			if (bo instanceof Node) {
				copy = copyNodeShape(s);
			}
			
			copyList.add(copy);
		}
		
		for (Connection c : connections) {
			Connection copy = copyConnection(c);
			copyList.add(copy);
		}
		
		return copyList;
	}
	
	
	
	private static Shape copyContainerShape(ContainerShape cs) {
		ContainerShape shapeCopy = EcoreUtil.copy(cs);
		shapeCopy.getChildren().clear();
		EObject boOrig = cs.getLink().getBusinessObjects().get(0);
		EObject boCopy = EcoreUtil.copy(boOrig);
		((Container) boCopy).getModelElements().clear();
		
		HashMap&lt;Shape, Shape&gt; replace = new HashMap&lt;&gt;();
		
		for (Shape child : cs.getChildren()) {
			if (child.getLink() == null)
				continue;
			
			EObject boChild = child.getLink().getBusinessObjects().get(0);
			
			if (boChild == null) 
				continue;
			/** Some Text Element may be linked with the model element ... **/
			if (boChild.equals(boOrig)) {
				child.getLink().getBusinessObjects().clear();
				child.getLink().getBusinessObjects().add(boCopy);
			} else {
			/** Found a contained node with different linked model element **/
				if (boChild instanceof Node) {
					Shape tmp = copyNodeShape(child);
					((Container) boCopy).getModelElements().add((ModelElement) tmp.getLink().getBusinessObjects().get(0));
					for (Shape s : cs.getChildren()) {
						if (s.getLink() != null &amp;&amp; s.getLink().getBusinessObjects().get(0).equals(boChild)) {
							copiedAnchors.put(s.getAnchors().get(0), tmp.getAnchors().get(0));
						}
					}
					replace.put(child, tmp);
				}
				
				if (boChild instanceof Container) {
					Shape tmp = copyContainerShape((ContainerShape) child);
					((Container) boCopy).getModelElements().add((ModelElement) tmp.getLink().getBusinessObjects().get(0));
					replace.put(child, tmp);
				}
			}
			
		}
		
		shapeCopy.getChildren().removeAll(replace.keySet());
		shapeCopy.getChildren().addAll(replace.values());
		
		shapeCopy.getLink().setPictogramElement(shapeCopy);
		shapeCopy.getLink().getBusinessObjects().clear();
		shapeCopy.getLink().getBusinessObjects().add(boCopy);
		
		copiedAnchors.put(cs.getAnchors().get(0), shapeCopy.getAnchors().get(0));
		copiedBos.put(boOrig, boCopy);
		
		return shapeCopy;
	}
	
	private static Shape copyNodeShape(Shape s) {
		Shape shapeCopy = EcoreUtil.copy(s);
		EObject boOrig = s.getLink().getBusinessObjects().get(0);
		EObject boCopy = EcoreUtil.copy(boOrig);
		
		shapeCopy.getLink().setPictogramElement(shapeCopy);
		shapeCopy.getLink().getBusinessObjects().clear();
		shapeCopy.getLink().getBusinessObjects().add(boCopy);
		
		if (shapeCopy instanceof ContainerShape) {
			for (Shape child : ((ContainerShape) shapeCopy).getChildren()) {
				if (child.getLink() != null &amp;&amp; boOrig.equals(child.getLink().getBusinessObjects().get(0))) {
					child.getLink().getBusinessObjects().clear();
					child.getLink().getBusinessObjects().add(boCopy);
				}
			}
		}
		
		copiedAnchors.put(s.getAnchors().get(0), shapeCopy.getAnchors().get(0));
		copiedBos.put(boOrig, boCopy);
		
		return shapeCopy;
	}
	
	/************************************************************** Connection copy methods **************************************************************/
	private static Connection copyConnection(Connection connection) {
		Connection copy = EcoreUtil.copy(connection);
		
		copy.setStart(copiedAnchors.get(connection.getStart()));
		copy.setEnd(copiedAnchors.get(connection.getEnd()));
		
		/** TODO: Copy bo and pictogramLink **/
		if (connection.getLink() != null)
			copyBOForConnection(copy, connection.getLink().getBusinessObjects().get(0), 
					connection.getStart().getParent().getLink().getBusinessObjects().get(0),
					connection.getEnd().getParent().getLink().getBusinessObjects().get(0));
		
		return copy;
	}
	
	private static void copyBOForConnection(PictogramElement copiedPE, EObject originBO, 
			EObject source, EObject target) {
		
		PictogramLink pl = PictogramsFactory.eINSTANCE.createPictogramLink();
		pl.setPictogramElement(copiedPE);
		EObject copy = EcoreUtil.copy(originBO);
		if (originBO instanceof Edge) {
			((Edge) copy).setSourceElement((ModelElement) copiedBos.get(source));
			((Edge) copy).setTargetElement((ModelElement) copiedBos.get(target));
		}
		pl.getBusinessObjects().add(copy);
		copiedPE.setLink(pl);
	}
	
	private static boolean isCopied(Connection c, List&lt;PictogramElement&gt; subGraph) {
		AnchorContainer source = c.getStart().getParent();
		AnchorContainer target = c.getEnd().getParent();
		boolean srcContained = false, trgContained = false;
		for (PictogramElement pe : subGraph) {
			if (EcoreUtil.isAncestor(pe, source))
				srcContained = true;
			if (EcoreUtil.isAncestor(pe, target))
				trgContained = true;
			if (srcContained &amp;&amp; trgContained)
				break;
		}
		
		return (srcContained &amp;&amp; trgContained);
	}
	
	private static void mapAnchors(ContainerShape cs, ContainerShape copy) {
		/** Map the anchors in a container shape **/
		for (Shape originChild : cs.getChildren()) {
			for (Shape copyChild : copy.getChildren()) {
				Object oOrigin = originChild.getLink().getBusinessObjects().get(0);
				Object oCopy = copyChild.getLink().getBusinessObjects().get(0);
				if (oOrigin.equals(oCopy)) {
					copiedAnchors.put(originChild.getAnchors().get(0), copyChild.getAnchors().get(0));
				}
			}
		}
	}
}
</string>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>af959c41-0db9-47da-820e-4cb97cab5b39</source>
    <target>b53373be-d920-4138-88c9-26741aac0c37</target>
    <point>90.0,810.0</point>
    <point>218.0,799.0</point>
    <branch>default</branch>
  </edge>
  <sib>
    <id>0f0a7466-dbe3-4238-929c-f0a9d52dbc33</id>
    <name>WriteJavaFile_2</name>
    <label>WriteJavaFile</label>
    <sib-uid>genesys-sibs/WriteJavaFile</sib-uid>
    <taxonomy>de.jabc.sib.genesys.WriteJavaFile</taxonomy>
    <position>478.0,783.0</position>
    <parameter name="baseDirectory">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>outletPath</key>
          <scope>GLOBAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="beautify">
      <boolean>false</boolean>
    </parameter>
    <parameter name="beautifyMethod">
      <de.metaframe.common.sib.parameter.ListBox>
        <ListBoxFoundation>
          <list>
            <string>Eclipse</string>
            <string>Jalopy</string>
          </list>
          <selected>0</selected>
        </ListBoxFoundation>
      </de.metaframe.common.sib.parameter.ListBox>
    </parameter>
    <parameter name="className">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>className</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="fileContent">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>copyUtilsContent</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <parameter name="packageName">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>localPkgName</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>b53373be-d920-4138-88c9-26741aac0c37</source>
    <target>e88f1be1-0c98-458d-be7d-f5d075fb5cce</target>
    <point>258.0,787.8</point>
    <point>312.0,742.8</point>
    <labelposition>500.0,0.0</labelposition>
    <branch>default</branch>
  </edge>
  <sib>
    <id>e88f1be1-0c98-458d-be7d-f5d075fb5cce</id>
    <name>PutExpression_3</name>
    <label>ClassName</label>
    <sib-uid>basic-sibs/PutExpression</sib-uid>
    <taxonomy>de.jabc.sib.common.basic.PutExpression</taxonomy>
    <position>335.5,783.0</position>
    <parameter name="resolve">
      <boolean>true</boolean>
    </parameter>
    <parameter name="value">
      <de.metaframe.common.sib.parameter.ContextExpression>
        <ContextExpressionFoundation>
          <expression>${graphModelName}CopyUtils</expression>
          <clazz>java.lang.Object</clazz>
          <classMutable>true</classMutable>
        </ContextExpressionFoundation>
      </de.metaframe.common.sib.parameter.ContextExpression>
    </parameter>
    <parameter name="variable">
      <de.metaframe.jabc.framework.sib.parameter.ContextKey>
        <ContextKeyFoundation>
          <key>className</key>
          <scope>LOCAL</scope>
          <scopeMutable>true</scopeMutable>
        </ContextKeyFoundation>
      </de.metaframe.jabc.framework.sib.parameter.ContextKey>
    </parameter>
    <finalbranches>default</finalbranches>
    <finalbranches>error</finalbranches>
  </sib>
  <edge>
    <source>e88f1be1-0c98-458d-be7d-f5d075fb5cce</source>
    <target>0f0a7466-dbe3-4238-929c-f0a9d52dbc33</target>
    <point>375.0,810.0</point>
    <point>472.0,804.0</point>
    <branch>default</branch>
  </edge>
  <values/>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>af959c41-0db9-47da-820e-4cb97cab5b39</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>8aa0a1dd-fd90-4abc-a2e9-ff882536ad38</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>9b993eaa-4198-4e0c-935b-27f234bb5373</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>5309ab68-80ac-4a7c-9ec0-be9b0ae6d65e</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>e1354f1f-6e52-44d9-8ccd-716d6ee62744</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>5fb9d5ed-29f7-49c6-885e-d21af9361340</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>59a427e8-25c5-482c-a32b-a0aa278eb41b</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>c7a9f388-11af-49f4-b686-2513289d8601</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>aa92bfe4-ce39-4f48-9ba1-2db17c3b8f9e</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>64b170ea-ca16-40c7-a22a-a8bb50df1fda</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>6303c061-3cd9-4d1b-8541-8220fdec7b36</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>b4f20ed1-1e2f-4749-b0ec-28cf10fd36fb</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>089f251a-81b3-4412-ba06-537e8677d433</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>b53373be-d920-4138-88c9-26741aac0c37</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>e88f1be1-0c98-458d-be7d-f5d075fb5cce</sib>
  </branch>
  <branch>
    <name>error</name>
    <branch>error</branch>
    <sib>0f0a7466-dbe3-4238-929c-f0a9d52dbc33</sib>
  </branch>
  <branch>
    <name>default</name>
    <branch>default</branch>
    <sib>0f0a7466-dbe3-4238-929c-f0a9d52dbc33</sib>
  </branch>
</model>