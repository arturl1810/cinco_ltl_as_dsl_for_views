/*
 * generated by Xtext
 */
package de.jabc.cinco.meta.core.ge.style.validation

import de.jabc.cinco.meta.core.utils.PathValidator
import java.util.ArrayList
import org.eclipse.xtext.validation.Check
import style.AbstractShape
import style.Alignment
import style.Appearance
import style.Image
import style.NodeStyle
import style.StylePackage

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class StyleValidator extends JStyleValidator {

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	public static val NO_PATH = 'noPathSpecified'
	public static val INVALID_PATH = 'invalidPath'
	
	@Check
 	def checkImagePath (Image image) {
 		if (image.path.nullOrEmpty)
 			warning('No Path specified', StylePackage.Literals.IMAGE__PATH, NO_PATH)
 		
 		val retVal = PathValidator.checkPath(image, image.path) as String
 		if (!retVal.empty)
 			error(retVal, StylePackage.Literals.IMAGE__PATH, INVALID_PATH)
 	}
	
	@Check
	def checkAppearanceInheritance(Appearance app) {
		var retvalList = checkInheritance(app)
		if (!retvalList.nullOrEmpty)
			error("Circle in appearance inheritances caused by: " + retvalList, StylePackage.Literals.APPEARANCE__PARENT)
	}
	
	def checkInheritance(Appearance app) {
		var current = app
		var apps = new ArrayList
		while (current != null) {
			if (apps.contains(current.name))
				return apps
			apps.add(current.name)
			current = current.parent
		}
	}
	
	@Check
	def checkMainShapePosition(AbstractShape abs) {
		if (abs.eContainer instanceof NodeStyle) {
			val pos = abs.position
			if (pos instanceof Alignment)
				error("Relativ positions are not allowed in the topmost element", StylePackage.Literals.ABSTRACT_SHAPE__POSITION);
		}
	}
	
}
