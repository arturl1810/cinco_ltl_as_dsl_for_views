// automatically generated by Xtext
grammar de.jabc.cinco.meta.core.ge.style.Style with org.eclipse.xtext.common.Terminals

import "http://www.jabc.de/cinco/style"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Styles returns Styles:
	(
		(appearances+=Appearance)* &
		(styles += Style)+
	)
;

Style returns Style:
	NodeStyle | EdgeStyle
;

NodeStyle returns NodeStyle:
	'nodeStyle' name=ID ('(' parameterCount=INT ')')? '{'
		('appearanceProvider' '('appearanceProvider=QName')')? 
		(fixed?='fixed')?
		mainShape=AbstractShape
	'}'
;

EdgeStyle returns EdgeStyle:
	'edgeStyle' name=ID ('(' parameterCount=INT ')')? '{'
		('appearanceProvider' '('appearanceProvider=QName')')? 
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )?
		(decorator+=ConnectionDecorator)*
	'}'
;

AbstractShape returns AbstractShape:
	ContainerShape | Shape
;

ContainerShape returns ContainerShape:
	Rectangle | RoundedRectangle | Ellipse | Polygon  
;

GraphicsAlgorithm:
	Text | MultiText | Image | Polyline | Ellipse | Polygon
; 

Shape returns Shape:
	Text | MultiText | Image | Polyline
;
 
Rectangle returns Rectangle:
	{Rectangle}
	'rectangle' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		('size' size = Size)?
		(children+=AbstractShape)*
	'}'
;

//SRectangle returns Rectangle:
//	{Rectangle}
//	'rectangle'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		('size' size = Size)?
//	'}'
//;

RoundedRectangle returns RoundedRectangle:
	{RoundedRectangle}
	'roundedRectangle' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		'size' size = Size
		'corner' '('cornerWidth=INT','cornerHeight=INT')'
		(children+=AbstractShape)*
	'}'
;

//SRoundedRectangle returns RoundedRectangle:
//	{RoundedRectangle}
//	'roundedRectangle'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		'size' size = Size
//		'corner' '('cornerWidth=INT','cornerHeight=INT')'
//	'}'
//;

Ellipse returns Ellipse:
	{Ellipse}
	'ellipse' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		('size' size = Size)?
		(children+=AbstractShape)*
	'}'
;

//SEllipse returns Ellipse:
//	{Ellipse}
//	'ellipse'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		('size' size = Size)?
//	'}'
//;

Polygon returns Polygon: 
	{Polygon}
	'polygon' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		'points' '['(points+=Point)*']'
		('size' size = Size)?
		(children+=AbstractShape)*
	'}'
;

//SPolygon returns Polygon:
//	{Polygon}
//	'polygon'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		'points' '['(points+=Point)*']'
//	'}'
//;

Text returns Text:
	{Text}
	'text' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		'value' value=STRING?
	'}'
;

//SText returns Text:
//	{Text}
//	'text'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		'value' value=STRING?
//	'}'
//;

MultiText returns MultiText:
	'multiText' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		'value' value = STRING
	'}'
;

//SMultiText returns MultiText:
//	'multiText'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		'size' size = Size
//		'value' value = STRING?
//	'}'
//;

Image returns Image:
	'image' (name=EString)?
	'{'
		('position' position = AbstractPosition)?
		'size' size = Size
		'path' '('path=STRING')'
	'}'
;

//SImage returns Image:
//	'image'
//	(name=ID)?
//	'{'
//		'size' size = Size
//		'path('path=STRING')'
//	'}'
//;

Polyline returns Polyline:
	{Polyline}
	'polyline' (name=EString)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'points' '[' (points+=Point)* ']'	
		('size' size = Size)?
	'}'
;

//SPolyline returns Polyline:
//	{Polyline}
//	'polyline'
//	(name=ID)?
//	'{'
//		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
//		'points' '[' (points+=Point)* ']'		
//	'}'
//;

AbstractPosition returns AbstractPosition:
	AbsolutPosition | Alignment 
;


AbsolutPosition returns AbsolutPosition:
	'('xPos=EInt','yPos=EInt')'
;

Alignment returns Alignment:
	'('horizontal=HAlignment (xMargin=EInt)? ',' vertical=VAlignment (yMargin=EInt)?')'
;

Point returns Point:
	'('x=EInt','y=EInt')'
;

Size returns Size:
	'(' (widthFixed?='fix')? width=INT','(heightFixed?='fix')? height=INT')'
;

ConnectionDecorator returns ConnectionDecorator:
	'decorator' (name=ID)? '{'
		('location' '(' location=EDouble ')' &
		(movable?='movable')? &
		(decoratorShape=GraphicsAlgorithm | predefinedDecorator=PredefinedDecorator))
	'}'
;

PredefinedDecorator returns PredefinedDecorator:
	shape=DecoratorShape (('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
;

enum DecoratorShape returns DecoratorShapes:
	ARROW | DIAMOND | CIRCLE | TRIANGLE
;

enum ContainerAlignment returns Alingnment:
	HORIZONTAL | VERTICAL
;
enum HAlignment returns HAlignment: 
 	LEFT='LEFT' | RIGHT='RIGHT' | CENTER='CENTER'
 ;
 
enum VAlignment returns VAlignment:
	BOTTOM='BOTTOM' | MIDDLE='MIDDLE' | TOP='TOP'
;
 
enum LineStyle returns LineStyle:
	DASH | DASHDOT | DASHDOTDOT | DOT | SOLID
;

enum Boolean returns BooleanEnum:
	true | false
;

Color returns Color:
	{Color}
	"("r=INT","g=INT","b=INT")"
;

Appearance returns Appearance:
	{Appearance}
	'appearance' name=ID ('extends' parent=[Appearance])? '{'
		(
			('angle' angle=EFloat)? &
			('background' background=Color)? &
			('foreground' foreground=Color)? &
			('font' font=Font)? &
			('lineStyle' lineStyle=LineStyle)? & 
			('lineWidth' lineWidth=INT)? &
			//(lineInVisible?='visible NOT')? &
			('transparency' transparency=EDouble)? &
			('filled' filled = Boolean)? &
			('imagePath' '('imagePath=STRING')')?
		)
	'}'
;

InlineAppearance returns Appearance:
	{Appearance}
	'appearance' ('extends' parent=[Appearance])? '{'
		(
			('angle' angle=EFloat)? &
			('background' background=Color)? &
			('foreground' foreground=Color)? &
			('font' font=Font)? &
			('lineStyle' lineStyle=LineStyle)? & 
			('lineWidth' lineWidth=INT)? &
			//(lineInVisible?='visible NOT')? &
			('transparency' transparency=EDouble)? &
			('filled' filled = Boolean)? &
			('imagePath' '('imagePath=STRING')')?
		)
	'}'
;

Font returns Font:
	'('fontName=STRING(','isBold?='BOLD')?(','isItalic?='ITALIC')?','size=INT')'
;

EDouble returns ecore::EDouble: 
	EInt ('.' INT)*
;

EFloat returns ecore::EFloat: 
	EInt ('.' INT)*
;

EInt returns ecore::EInt:
	('-')?INT
;

QName:
	EString ('.'EString)*
;

EString:
	STRING | ID
;
