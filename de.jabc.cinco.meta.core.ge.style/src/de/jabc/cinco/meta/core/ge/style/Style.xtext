// automatically generated by Xtext
grammar de.jabc.cinco.meta.core.ge.style.Style with org.eclipse.xtext.common.Terminals

import "http://www.jabc.de/cinco/style"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Styles returns Styles:
	('Style Configuration' '['
		(containerAttributes=ContainerAttributes)?
	']')?
	// parentheses for unordered groups
	(
		(appearances+=Appearance)* &
		(styles += Style)+
	)
;

ContainerAttributes returns ContainerAttributes:
	containersOnly?='containersOnly'
	'alignContainer' alignment=ContainerAlignment
	
;


Style returns Style:
	NodeStyle | EdgeStyle
;

NodeStyle returns NodeStyle:
	'nodeStyle' name=ID ('appearanceProvider' '('appearanceProvider=QName')')? '{'
		(fixed?='fixed')?
		mainShape=AbstractShape
	'}'
;

EdgeStyle returns EdgeStyle:
	'edgeStyle' name=ID ('appearanceProvider' '('appearanceProvider=QName')')? '{'
		'lineStyle' lineStyle=LineStyle
		('lineWidth' lineWidth=INT)?
		('decorators' '{'
			(decorator+=ConnectionDecorator)*
		'}')?
	'}'
;

AbstractShape returns AbstractShape:
	ContainerShape | Shape
;

ContainerShape returns ContainerShape:
	Rectangle | RoundedRectangle | Ellipse | Polygon  
;

GraphicsAlgorithm:
	SText | SMultiText | SImage | SPolyline | SEllipse | SPolygon
; 

Shape returns Shape:
	Text | MultiText | Image | Polyline
;

Rectangle returns Rectangle:
	{Rectangle}
	'rectangle'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		('size' size = Size)?
		('color' color = Color)?
		(children+=AbstractShape)*
	'}'
;

SRectangle returns Rectangle:
	{Rectangle}
	'rectangle'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('size' size = Size)?
		('color' color = Color)?
	'}'
;

RoundedRectangle returns RoundedRectangle:
	{RoundedRectangle}
	'roundedRectangle'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'position' position = AbstractPosition
		'size' size = Size
		'corner' '('cornerWidth=INT','cornerHeight=INT')'
		('color' color = Color)?
		(children+=AbstractShape)*
	'}'
;

SRoundedRectangle returns RoundedRectangle:
	{RoundedRectangle}
	'roundedRectangle'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'size' size = Size
		'corner' '('cornerWidth=INT','cornerHeight=INT')'
		('color' color = Color)?
	'}'
;

Ellipse returns Ellipse:
	{Ellipse}
	'ellipse'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		('size' size = Size)?
		('color' color = Color)?
		(children+=AbstractShape)*
	'}'
;

SEllipse returns Ellipse:
	{Ellipse}
	'ellipse'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('size' size = Size)?
		('color' color = Color)?
	'}'
;

Polygon returns Polygon: 
	{Polygon}
	'polygon'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		'points' '['(points+=Point)*']'
		('color' color = Color)?
		(children+=AbstractShape)*
	'}'
;

SPolygon returns Polygon:
	{Polygon}
	'polygon'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'points' '['(points+=Point)*']'
		('color' color = Color)?
	'}'
;

Text returns Text:
	{Text}
	'text'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		('position' position = AbstractPosition)?
		'value' value=STRING?
		('color' color = Color)?
	'}'
;

SText returns Text:
	{Text}
	'text'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'value' value=STRING?
		('color' color = Color)?
	'}'
;

MultiText returns MultiText:
	'multiText'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'position' position = AbstractPosition
		'value' value = STRING
		('color' color = Color)?
	'}'
;

SMultiText returns MultiText:
	'multiText'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'size' size = Size
		'value' value = STRING?
		('color' color = Color)?
	'}'
;

Image returns Image:
	'image'
	(name=ID)?
	'{'
		'position' position = AbstractPosition
		'size' size = Size
		'path('path=STRING')'
	'}'
;

SImage returns Image:
	'image'
	(name=ID)?
	'{'
		'size' size = Size
		'path('path=STRING')'
	'}'
;

Polyline returns Polyline: 
	'polyline'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'position' position = AbstractPosition
		'points' '[' (points+=Point)* ']'		
		('color' color = Color)?
	'}'
;

SPolyline returns Polyline:
	{Polyline}
	'polyline'
	(name=ID)?
	'{'
		(('appearance' referencedAppearance=[Appearance]) | (inlineAppearance=InlineAppearance) )? 
		'points' '[' (points+=Point)* ']'		
		('color' color = Color)?
	'}'
;

AbstractPosition returns AbstractPosition:
	AbsolutPosition | Alignment 
;


AbsolutPosition returns AbsolutPosition:
	'('xPos=INT','yPos=INT')'
;

Alignment returns Alignment:
	'relativeTo' relativeTo = [ContainerShape|ID]
	'('horizontal=HAlignment','vertical=VAlignment')'
;

Point returns Point:
	'('x=EInt','y=EInt')'
;

Size returns Size:
	'('width=INT','height=INT')'
;

ConnectionDecorator returns ConnectionDecorator:
	'location' '(' location=EDouble ')'
	(movable?='movable')?
	(decoratorShape=GraphicsAlgorithm | predefinedDecorator=PredefinedDecorator)
;

PredefinedDecorator returns PredefinedDecorator:
	shape=DecoratorShape ('appearance' appearance=[Appearance])?
;

enum DecoratorShape returns DecoratorShapes:
	ARROW | DIAMOND | CIRCLE | TRIANGLE
;

enum ContainerAlignment returns Alingnment:
	HORIZONTAL | VERTICAL
;
enum HAlignment returns HAlignment: 
 	LEFT='LEFT' | RIGHT='RIGHT' | CENTER='CENTER'
 ;
 
enum VAlignment returns VAlignment:
	BOTTOM='BOTTOM' | MIDDLE='MIDDLE' | TOP='TOP'
;
 
enum LineStyle returns LineStyle:
	DASH | DASHDOT | DASHDOTDOT | DOT | SOLID
;
 
Color returns Color:
	{Color}
	"("r=INT","g=INT","b=INT")"
;

Appearance returns Appearance:
	{Appearance}
	'appearance' name=ID ('extends' parent=[Appearance])? '{'
		(
			('angle' angle=INT)? &
			('background' background=Color)? &
			('foreground' foreground=Color)? &
			('font' font=Font)? &
			('lineStyle' lineStyle=LineStyle)? & 
			('lineWidth' lineWidth=INT)? &
			(lineInVisible?='visible NOT')? &
			('transparency' transparency=EDouble)? &
			(filled?='filled')? &
			('imagePath' '('imagePath=STRING')')?
		)
	'}'
;

InlineAppearance returns Appearance:
	{Appearance}
	'appearance' ('extends' parent=[Appearance])? '{'
		(
			('angle' angle=INT)? &
			('background' background=Color)? &
			('foreground' foreground=Color)? &
			('font' font=Font)? &
			('lineStyle' lineStyle=LineStyle)? & 
			('lineWidth' lineWidth=INT)? &
			(lineInVisible?='visible NOT')? &
			('transparency' transparency=EDouble)? &
			(filled?='filled')? &
			('imagePath' '('imagePath=STRING')')?
		)
	'}'
;

Font returns Font:
	'('fontName=STRING(','isBold?='BOLD')?(','isItalic?='ITALIC')?','size=INT')'
;

EDouble returns ecore::EDouble: 
	EInt ('.' INT)*
;

EInt returns ecore::EInt:
	('-')?INT
;

QName:
	EString ('.'EString)*
;

EString:
	STRING | ID
;