// automatically generated by Xtext and modified by me
grammar de.jabc.cinco.meta.core.mgl.MGL with org.eclipse.xtext.common.Terminals

import "http://www.jabc.de/cinco/meta/core/mgl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


GraphModel returns GraphModel:
	('import' imports+=Import)*
	(annotations+=Annotation)*
	'graphModel'
	name=EString ('extends' extends=[GraphModel|EString])?
	'{'
		
		('package' package=QName)?
		'nsURI' nsURI=URI
		('iconPath' iconPath=EString)?
		'diagramExtension' fileExtension=EString
		('containableElements' '(' containableElements+=GraphicalElementContainment ( "," containableElements+=GraphicalElementContainment)* ')' )?
		(attributes+=Attribute)*
		//('submodels' '(' submodels+=[GraphModel|EString] ( "," submodels+=[GraphModel|EString])* ')' )?
		
		 ((nodes+=Node)
		  |(edges+=Edge)
		  |(nodes+=NodeContainer)
		  |(types+=Type))*
		
		
		
	'}'
;


URI:
	EString
;


Information returns Information:
	ModelCheckInformation | DataFlowInformation;

QName:
	(ID | ANY_OTHER)+(=>'.'(ID|ANY_OTHER)+)*
;

EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;
Attribute returns Attribute:
	{Attribute}
	(annotations+=Annotation)*
	(notChangeable?='final')? (unique?='unique')? 'attr' type=(EString|Map) 'as' name=EString ('[' lowerBound=EInt (',' ((upperBound=BoundValue)))? ']')?  (':=' defaultValue=EString)? 
;

GraphicalModelElement:
	Edge|Node|NodeContainer
	
	
;

Map:
	'EMap''<'QName','QName'>'
;

Edge returns Edge:
	{Edge}
	(annotations+=Annotation)*
	(isAbstract?='abstract' )?'edge'
	name=EString ('extends' extends=[Edge|EString])?
	('{'
		(attributes+=Attribute (  attributes+=Attribute)*)?

	'}')?
;

Node returns Node:
	{Node}
	(annotations+=Annotation)*
	(isAbstract?='abstract' )?'node'
	name=EString('extends' extends=[Node|EString])? 
	'{'
		( (attributes+=Attribute)*
		& (primeReference=(ReferencedEClass|ReferencedModelElement))?
		& ('incomingEdges' '(' incomingEdgeConnections+=IncomingEdgeElementConnection (',' incomingEdgeConnections+=IncomingEdgeElementConnection)*')')?
		& ('outgoingEdges' '(' outgoingEdgeConnections+=OutgoingEdgeElementConnection (',' outgoingEdgeConnections+=OutgoingEdgeElementConnection)*')')?)
		
	'}'
;

Annotation:
	{Annotation}
	'@'name=EString('('value+=EString (',' value+=EString)* ')')?
;

NodeContainer returns NodeContainer:
	{NodeContainer}
	(annotations+=Annotation)*
	(isAbstract?='abstract' )? 'container'
	name=EString ('extends' extends=[NodeContainer|EString])?
	'{'
		((attributes+=Attribute)*
		& (primeReference=(ReferencedEClass|ReferencedModelElement))?
		&('containableElements' '(' containableElements+=GraphicalElementContainment ( "," containableElements+=GraphicalElementContainment)* ')' )?
		&('incomingEdges' '(' incomingEdgeConnections+=IncomingEdgeElementConnection (',' incomingEdgeConnections+=IncomingEdgeElementConnection)*')')?
		&('outgoingEdges' '(' outgoingEdgeConnections+=OutgoingEdgeElementConnection (',' outgoingEdgeConnections+=OutgoingEdgeElementConnection)*')')?)
		
	'}'
;

OutgoingEdgeElementConnection returns OutgoingEdgeElementConnection:
	{OutgoingEdgeElementConnection}
	(connectingEdges+=[Edge|QName]|'{'connectingEdges+=[Edge|QName](','connectingEdges+=[Edge|QName])*'}'|'*')('['lowerBound=EInt ',' ((upperBound=BoundValue))']')?
;

IncomingEdgeElementConnection returns IncomingEdgeElementConnection:
	{IncomingEdgeElementConnection}
	(connectingEdges+=[Edge|QName]|'{'connectingEdges+=[Edge|QName](','connectingEdges+=[Edge|QName])*'}'|'*')('['lowerBound=EInt ',' ((upperBound=BoundValue))']')?
;

GraphicalElementContainment returns GraphicalElementContainment:
	{GraphicalElementContainment}
	((types+=[GraphicalModelElement|QName])|'{'(types+=[GraphicalModelElement|QName])(','(types+=[GraphicalModelElement|QName]) )*'}'|'*')('['lowerBound=EInt ','(upperBound=BoundValue) ']')?
;

Import returns Import:
	{Import}
importURI=STRING 'as' name=ID
;

BoundValue returns ecore::EInt:
	'*'|EInt

;

EdgeDirection returns EdgeDirection:
	//'EdgeDirection' /* TODO: implement this rule and an appropriate IValueConverter */;
		'Undirected'|
		'TargetDirected'|
		'SourceDirected'|
		'Bidirected'
	;
	

ModelCheckInformation returns ModelCheckInformation:
	{ModelCheckInformation}
	'ModelCheckInformation'
	'{'
		('extends' extends=[ModelCheckInformation|EString])?
	'}';

DataFlowInformation returns DataFlowInformation:
	{DataFlowInformation}
	'DataFlowInformation'
	'{'
		('extends' extends=[DataFlowInformation|EString])?
	'}';

//Enum:
//	'enum' '('EString (',' EString)*')'
//;
Enum returns Enumeration:
	{Enumeration}
	(annotations+=Annotation)*
	'enum' name=EString '{'
							literals+=EString 
							(literals+=EString)*
						'}'

;

Type:
	Enum|UserDefinedType
;

UserDefinedType returns UserDefinedType:
	{UserDefinedType}
	(annotations+=Annotation)*
	'type' name=EString '{' 
			(attributes+=Attribute)*
	'}'
;

ReferencedType returns ReferencedType:
	ReferencedEClass|ReferencedModelElement
;

ReferencedEClass returns ReferencedEClass:
	(annotations+=Annotation)*
	'prime' imprt=[Import|ID]'.'type=[ecore::EClass|ID] 'as' name=EString
	(copiedAttributes+=ReferencedEStructuralFeature)*
;

ReferencedModelElement returns ReferencedModelElement:
	(annotations+=Annotation)*
	'prime' (local?='this'|imprt=[Import|QName])'::'type=[ModelElement|QName] 'as' name=EString
	(copiedAttributes+=ReferencedMGLAttribute)*
;

ReferencedAttribute returns ReferencedAttribute:
	ReferencedMGLAttribute| ReferencedEStructuralFeature
;
ReferencedEStructuralFeature returns ReferencedEStructuralFeature:
		(parameter?='primeparam'|'primeattr') feature=[ecore::EStructuralFeature|QName] 'as' name=EString
;
ReferencedMGLAttribute returns ReferencedMGLAttribute:
	'primeattr' feature=[Attribute|QName] 'as' name=EString
;
