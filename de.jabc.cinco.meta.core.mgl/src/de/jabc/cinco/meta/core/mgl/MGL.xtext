// automatically generated by Xtext and modified by me
grammar de.jabc.cinco.meta.core.mgl.MGL with org.eclipse.xtext.common.Terminals

import "http://www.jabc.de/cinco/meta/core/mgl"
//import "platform:/resource/de.jabc.cinco.meta.core.mgl.model/model/MGL.ecore"
//generate gdl "http://www.jabc.de/cinco/gdl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore" as ecore

GraphModel returns GraphModel:
	('import' imports+=Import)*
	(annotations+=Annotation)*
	'graphModel'
	name=EString ('extends' extends=[GraphModel|EString])?
	'{'
		
		('package' package=QName)?
		'nsURI' nsURI=EString
		('iconPath' iconPath=EString)?
		'diagramExtension' fileExtension=EString
		('containableElements' '(' containableElements+=GraphicalElementContainment ( "," containableElements+=GraphicalElementContainment)* ')' )?
		(attributes+=Attribute)*
		('submodels' '(' submodels+=[GraphModel|EString] ( "," submodels+=[GraphModel|EString])* ')' )?
		
		(nodes+=Node)
		(  (nodes+=Node)
		  |(edges+=Edge)
		  |(nodeContainers+=NodeContainer)
		  |(types+=Type) 
		)*
		
		
	'}'
;






Information returns Information:
	ModelCheckInformation | DataFlowInformation;

QName:
	EString('.'EString)*
;

EString returns ecore::EString:
	STRING | ID;
	
EInt returns ecore::EInt:
	'-'? INT;
Attribute returns Attribute:
	{Attribute}
	(annotations+=Annotation)*
	(notChangeable?='final')? (unique?='unique')? 'attr' type=(EString|Map) 'as' name=EString ('[' lowerBound=EInt (',' upperBound=EInt)? ']')?  (':=' defaultValue=EString)? 
;
//	name=EString
//	'{'
//		'type' type+=(EString|Map)
//		('lowerBound' lowerBound=EInt)?
//		('upperBound' upperBound=EInt)?
//		
//	'}';

GraphicalModelElement:
	Edge|Node|NodeContainer
	
	
;

Map:
	'EMap''<'QName','QName'>'
;

Edge returns Edge:
	{Edge}
	(annotations+=Annotation)*
	(isAbstract?='abstract' )?'edge'
	name=EString ('extends' extends=[Edge|EString])?
	'{'
		(attributes+=Attribute (  attributes+=Attribute)*)?
		//((('sourceNodes' '(' sourceElements+=[GraphicalModelElement|QName] ( "," sourceElements+=[GraphicalModelElement|QName])* ')')
		//('targetNodes' '(' targetElements+=[GraphicalModelElement|QName] ( "," targetElements+=[GraphicalModelElement|QName])* ')'))|
		//(('targetNodes' '(' targetElements+=[GraphicalModelElement|QName] ( "," targetElements+=[GraphicalModelElement|QName])* ')')
		//('sourceNodes' '(' sourceElements+=[GraphicalModelElement|QName] ( "," sourceElements+=[GraphicalModelElement|QName])* ')')))
//		((('sourceNodes' '(' sourceElements+=EdgeElementConnection(','sourceElements+=EdgeElementConnection)* ')')
//		('targetNodes' '(' targetElements+=EdgeElementConnection(','targetElements+=EdgeElementConnection)* ')')))|
//		((('targetNodes' '(' targetElements+=EdgeElementConnection(','targetElements+=EdgeElementConnection)* ')'))
//		(('sourceNodes' '(' sourceElements+=EdgeElementConnection(','sourceElements+=EdgeElementConnection)* ')')))
	//	('incoming cardinality''['minIncoming=EInt','maxIncoming=EInt']')?
	//('outgoing cardinality''['minOutgoing=EInt','maxOutgoing=EInt']')?
	'}'
;

Node returns Node:
	{Node}
	(annotations+=Annotation)*
	(isAbstract?='abstract' )?'node'
	name=EString('extends' extends=[Node|EString])? 
	'{'
		(attributes+=Attribute)*
		(primeReference=ReferencedType)?
		('incomingEdges' '(' incomingEdgeConnections+=IncomingEdgeElementConnection (',' incomingEdgeConnections+=IncomingEdgeElementConnection)*')')?
		('outgoingEdges' '(' outgoingEdgeConnections+=OutgoingEdgeElementConnection (',' outgoingEdgeConnections+=OutgoingEdgeElementConnection)*')')?
	'}'
;

Annotation:
	{Annotation}
	'@' '('name=EString (',' value+=EString)* ')'
;

NodeContainer returns NodeContainer:
	{NodeContainer}
	(annotations+=Annotation)*
	(isAbstract?='abstract' )? 'container'
	name=EString ('extends' extends=[NodeContainer|EString])?
	'{'
		(attributes+=Attribute)*
		('containableElements' '(' containableElements+=GraphicalElementContainment ( "," containableElements+=GraphicalElementContainment)* ')' )?
		('incomingEdges' '(' incomingEdgeConnections+=IncomingEdgeElementConnection (',' incomingEdgeConnections+=IncomingEdgeElementConnection)*')')?
		('outgoingEdges' '(' outgoingEdgeConnections+=OutgoingEdgeElementConnection (',' outgoingEdgeConnections+=OutgoingEdgeElementConnection)*')')?
		
	'}'
;

OutgoingEdgeElementConnection returns OutgoingEdgeElementConnection:
	{OutgoingEdgeElementConnection}
	(connectingEdges+=[Edge|QName]|'*'|'{'connectingEdges+=[Edge|QName](','connectingEdges+=[Edge|QName])*'}')('['lowerBound=EInt ',' upperBound=EInt']')?
;

IncomingEdgeElementConnection returns IncomingEdgeElementConnection:
	{IncomingEdgeElementConnection}
	(connectingEdges+=[Edge|QName]|'*'|'{'connectingEdges+=[Edge|QName](','connectingEdges+=[Edge|QName])*'}')('['lowerBound=EInt ',' upperBound=EInt']')?
;

GraphicalElementContainment returns GraphicalElementContainment:
	{GraphicalElementContainment}
	((type=[GraphicalModelElement|QName])|'*')('['lowerBound=EInt ','upperBound=EInt ']')?
;

Import returns Import:
	{Import}
importURI=STRING
;


EdgeDirection returns EdgeDirection:
	//'EdgeDirection' /* TODO: implement this rule and an appropriate IValueConverter */;
		'Undirected'|
		'TargetDirected'|
		'SourceDirected'|
		'Bidirected'
	;
	

ModelCheckInformation returns ModelCheckInformation:
	{ModelCheckInformation}
	'ModelCheckInformation'
	'{'
		('extends' extends=[ModelCheckInformation|EString])?
	'}';

DataFlowInformation returns DataFlowInformation:
	{DataFlowInformation}
	'DataFlowInformation'
	'{'
		('extends' extends=[DataFlowInformation|EString])?
	'}';

//Enum:
//	'enum' '('EString (',' EString)*')'
//;
Enum returns Enumeration:
	{Enumeration}
	(annotations+=Annotation)*
	'enum' name=EString '{'
							literals+=EString 
							(literals+=EString)*
						'}'

;

Type:
	Enum|UserDefinedType
;

UserDefinedType returns UserDefinedType:
	{UserDefinedType}
	(annotations+=Annotation)*
	'type' name=EString '{' 
			(attributes+=Attribute)*
	'}'
;

ReferencedType returns ReferencedType:
	{ReferencedType}
	(annotations+=Annotation)*
	'prime' type=[ecore::EClass|QName] 'as' name=EString
	(copiedAttributes+=ReferencedAttribute)*
;

ReferencedAttribute returns ReferencedAttribute:
	(parameter?='primeParam'|'primeAttr') feature=[ecore::EStructuralFeature|QName] 'as' name=EString
;
