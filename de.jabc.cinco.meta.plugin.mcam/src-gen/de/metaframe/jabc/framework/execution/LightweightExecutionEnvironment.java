/*
 * Copyright 1992,2009 METAFrame Technologies GmbH, Universit√§t Dortmund
 *    _    _    ____   ____     _____                                            _    
 *   (_)  / \  | __ ) / ___|   |  ___| __ __ _ _ __ ___   _____      _____  _ __| | __
 *   | | / _ \ |  _ \| |       | |_ | '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
 *   | |/ ___ \| |_) | |___    |  _|| | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
 *  _/ /_/   \_\____/ \____|   |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\
 * |__/                                                                             
 *
 * For license details contact nagel@jabc.de
 * 
 */
package de.metaframe.jabc.framework.execution;

import java.util.Map;

import de.metaframe.jabc.framework.execution.context.LightweightExecutionContext;
import de.metaframe.jabc.framework.execution.el.ContextExpressionEvaluator;
import de.metaframe.jabc.framework.sib.parameter.foundation.ContextExpressionFoundation;

/**
 * This interface supports a lightweight JavaABC execution environment for the
 * Java Standard Edition. It provides basic methods to access the runtime
 * environment of the current execution thread for the code generated by the
 * Genesys plugin. SIBs intended to support Pure Generators are restricted to
 * the methods offered by this interface when realizing their executional
 * aspect.
 * 
 * @author Benjamin Bentmann
 * @version $Revision: 6564 $ $Date: 2009-06-12 13:41:56 +0200 (Fri, 12 Jun 2009) $
 */
public interface LightweightExecutionEnvironment {

	/**
	 * Gets the local execution context for this runtime environment. The local
	 * execution context is the topmost context in the current stack of
	 * execution contexts.
	 * 
	 * @return The local execution context.
	 */
	public LightweightExecutionContext getLocalContext();

	/**
	 * Adds the specified execution context to the top of the stack. This
	 * context becomes the new local execution context.
	 * 
	 * @param context
	 *            The new local execution context, must not be {@code null}.
	 * @return The new local execution context.
	 */
	public LightweightExecutionContext pushContext(
			LightweightExecutionContext context);

	/**
	 * Removes the topmost execution context from the stack. The new topmost
	 * context becomes the local execution context.
	 * 
	 * @return The execution context that has been removed from the stack.
	 * @throws java.util.EmptyStackException
	 *             If there is no execution context on the stack.
	 */
	public LightweightExecutionContext popContext();

	/**
	 * Gets the evaluator used to process context expressions in this runtime
	 * environment.
	 * 
	 * @return The context expression evaluator.
	 */
	public ContextExpressionEvaluator getExpressionEvaluator();

	/**
	 * Evaluates the specified context expression.
	 * 
	 * @param expression
	 *            The context expression to evaluate, must not be {@code null}.
	 * @return The result of the expression evaluation.
	 * @throws NullPointerException
	 *             If the specified expression is {@code null}.
	 * @throws IllegalArgumentException
	 *             If the specified expression could not be evaluated due to
	 *             unresolvable variables, unknown functions or otherwise bad
	 *             syntax.
	 */
	public Object evaluate(ContextExpressionFoundation expression);

	/**
	 * Saves the branch that the specified sub thread of the current execution
	 * thread used to exit its execution. Sub threads are identified by the
	 * branch name that the corresponding fork SIB used to enter the sub thread.
	 * <strong>Note:</strong> This is an internal method and should not be called
	 * directly from SIBs.
	 * 
	 * @param threadIdentifier
	 *            The identifier of the sub thread, must not be {@code null}.
	 * @param branchName
	 *            The name of the branch that the sub thread used to exit, may be
	 *            {@code null}.
	 */
	public void setThreadExitBranch(String threadIdentifier, String branchName);

	/**
	 * Gets the branches that the most recently forked sub threads used to exit
	 * their executions. Note that the returned map merely provides a snapshot
	 * view.
	 * 
	 * @return The exit branches of the sub threads, indexed by thread
	 *         identifier, never {@code null}.
	 */
	public Map<String, String> getThreadExitBranches();

	/**
	 * Clears the information about thread exit branches. <strong>Note:</strong>
	 * This is an internal method and should not be called directly from SIBs.
	 */
	public void clearThreadExitBranches();

	/**
	 * Gets the object (e.g. an event) that caused the execution of the thread associated with environment.
	 * 
	 * @return The object that caused execution of this thread or {@code null} if none.
	 */
	public Object getExecutionCause();

}
