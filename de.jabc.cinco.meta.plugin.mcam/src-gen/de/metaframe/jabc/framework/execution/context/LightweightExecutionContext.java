/*
 * Copyright 1992,2009 METAFrame Technologies GmbH, Universit√§t Dortmund
 *    _    _    ____   ____     _____                                            _    
 *   (_)  / \  | __ ) / ___|   |  ___| __ __ _ _ __ ___   _____      _____  _ __| | __
 *   | | / _ \ |  _ \| |       | |_ | '__/ _` | '_ ` _ \ / _ \ \ /\ / / _ \| '__| |/ /
 *   | |/ ___ \| |_) | |___    |  _|| | | (_| | | | | | |  __/\ V  V / (_) | |  |   < 
 *  _/ /_/   \_\____/ \____|   |_|  |_|  \__,_|_| |_| |_|\___| \_/\_/ \___/|_|  |_|\_\
 * |__/                                                                             
 *
 * For license details contact nagel@jabc.de
 * 
 */
package de.metaframe.jabc.framework.execution.context;

import java.util.Map;

import de.metaframe.jabc.framework.sib.parameter.foundation.ContextElementFoundation;
import de.metaframe.jabc.framework.sib.parameter.foundation.ContextKeyFoundation;

/**
 * This interface supports a lightweight JavaABC execution environment for the
 * Java Standard Edition. It defines the functionality of an execution context
 * appropriate to decouple the code generated by the Genesys plugin from the
 * {@code jabc-framework.jar}. SIBs intended to support Pure Generators are
 * restricted to the methods offered by this interface when realizing their
 * executional aspect.
 * <p>
 * Unless otherwise noted, all methods inherited from {@link Map} directly
 * operate on this execution context and do not access any ancestor contexts.
 * 
 * @author Benjamin Bentmann
 * @version $Revision: 6564 $ $Date: 2009-06-12 13:41:56 +0200 (Fri, 12 Jun 2009) $
 */
public interface LightweightExecutionContext extends Map<String, Object> {

	/**
	 * Retrieves the value for the specified key from its declaring execution
	 * context.
	 * 
	 * @param key
	 *            The key whose value is to retrieve, must not be {@code null}.
	 * @return The current value associated with the specified key or
	 *         {@code null} if there is no mapping for the key (which is
	 *         especially true if no execution context declared the key).
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 * @see #getDeclaringContext(Object)
	 */
	public Object get(Object key);

	/**
	 * Stores the specified value for the given key in its declaring execution
	 * context. If no context declares the specified key yet, the value is put
	 * into this execution context which then becomes the declaring context for
	 * the key.
	 * 
	 * @param key
	 *            The key at which to store the value, must not be {@code null}.
	 * @param value
	 *            The value to be associated with the specified key, may be
	 *            {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 * @see #getDeclaringContext(Object)
	 */
	public Object put(String key, Object value);

	/**
	 * Removes the specified key and its associated value from the declaring
	 * execution context. Note that after this removal, another ancestor context
	 * might become the declaring context for the key.
	 * 
	 * @param key
	 *            The key whose value is to remove from this execution context,
	 *            must not be {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key (which is
	 *         especially true if no execution context declared the key).
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 * @see #getDeclaringContext(Object)
	 */
	public Object remove(Object key);

	/**
	 * Retrieves the value for the specified key from this execution context.
	 * 
	 * @param key
	 *            The key whose value is to retrieve, must not be {@code null}.
	 * @return The current value associated with the specified key or
	 *         {@code null} if there is no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object getLocal(Object key);

	/**
	 * Stores the specified value in this execution context using the given key.
	 * 
	 * @param key
	 *            The key at which to store the value, must not be {@code null}.
	 * @param value
	 *            The value to be associated with the specified key, may be
	 *            {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object putLocal(String key, Object value);

	/**
	 * Removes the specified key and its associated value from this execution
	 * context.
	 * 
	 * @param key
	 *            The key whose value is to remove from this execution context,
	 *            must not be {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object removeLocal(Object key);

	/**
	 * Retrieves the value for the specified key from the global execution
	 * context.
	 * 
	 * @param key
	 *            The key whose value is to retrieve, must not be {@code null}.
	 * @return The current value associated with the specified key or
	 *         {@code null} if there is no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object getGlobally(Object key);

	/**
	 * Stores the specified value in the global execution context using the
	 * given key.
	 * 
	 * @param key
	 *            The key at which to store the value, must not be {@code null}.
	 * @param value
	 *            The value to be associated with the specified key, may be
	 *            {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object putGlobally(String key, Object value);

	/**
	 * Removes the specified key and its associated value from the global
	 * execution context.
	 * 
	 * @param key
	 *            The key whose value is to remove from this execution context,
	 *            must not be {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object removeGlobally(Object key);

	/**
	 * Retrieves the value for the specified key from the parent context of this
	 * execution context.
	 * 
	 * @param key
	 *            The key whose value is to retrieve, must not be {@code null}.
	 * @return The current value associated with the specified key or
	 *         {@code null} if there is no mapping for the key (which is
	 *         especially true if this execution context has no parent context).
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object getFromParent(Object key);

	/**
	 * Stores the specified value in the parent context of this execution
	 * context using the given key. This operation has no effect if this
	 * execution context has no parent context.
	 * 
	 * @param key
	 *            The key at which to store the value, must not be {@code null}.
	 * @param value
	 *            The value to be associated with the specified key, may be
	 *            {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key (which is
	 *         especially true if this execution context has no parent context).
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object putIntoParent(String key, Object value);

	/**
	 * Removes the specified key from the parent context of this execution
	 * context. This operation has no effect if this execution context has no
	 * parent context.
	 * 
	 * @param key
	 *            The key to remove from the parent context, must not be
	 *            {@code null}.
	 * @return The previous value associated with the specified key or
	 *         {@code null} if there was no mapping for the key (which is
	 *         especially true if this execution context has no parent context).
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public Object removeFromParent(Object key);

	/**
	 * Retrieves the value for the specified context element from the execution
	 * context stack.
	 * 
	 * @param element
	 *            The context element whose value is to retrieve, must not be
	 *            {@code null}.
	 * @return The current value associated with the specified element or
	 *         {@code null} if there is no mapping for the key of the element in
	 *         the specified scope.
	 * @throws NullPointerException
	 *             If {@code element} is {@code null}.
	 * @throws ClassCastException
	 *             If the value in the execution context is not assignment
	 *             compatible with the type declared by the context element.
	 */
	public Object get(ContextKeyFoundation element);

	/**
	 * Stores the specified value in the execution context stack using the key
	 * and scope given by the context element.
	 * 
	 * @param element
	 *            The context element at which to store the value, must not be
	 *            {@code null}.
	 * @param value
	 *            The value to be associated with the specified element, may be
	 *            {@code null}.
	 * @return The previous value associated with the specified element or
	 *         {@code null} if there was no mapping for the key of the element
	 *         in the specified scope.
	 * @throws NullPointerException
	 *             If {@code element} is {@code null}.
	 * @throws ClassCastException
	 *             If the specified value is not assignment compatible with the
	 *             type declared by the context element.
	 */
	public Object put(ContextKeyFoundation element, Object value);

	/**
	 * Removes the specified context element from the execution context stack.
	 * 
	 * @param element
	 *            The context element to remove from this context, must not be
	 *            {@code null}.
	 * @return The previous value associated with the specified element or
	 *         {@code null} if there was no mapping for the key of the element
	 *         in the specified scope.
	 * @throws NullPointerException
	 *             If {@code element} is {@code null}.
	 */
	public Object remove(ContextKeyFoundation element);

	/**
	 * Retrieves the value for the specified context element from the execution
	 * context stack.
	 * 
	 * @param element
	 *            The context element whose value is to retrieve, must not be
	 *            {@code null}.
	 * @return The current value associated with the specified element or
	 *         {@code null} if there is no mapping for the key of the element in
	 *         the specified scope.
	 * @throws NullPointerException
	 *             If {@code element} is {@code null}.
	 * @throws ClassCastException
	 *             If the value in the execution context is not assignment
	 *             compatible with the type declared by the context element.
	 * @deprecated Use {@link #get(ContextKeyFoundation)} instead.
	 */
	@Deprecated
	public Object get(ContextElementFoundation element);

	/**
	 * Stores the specified value in the execution context stack using the key
	 * and scope given by the context element.
	 * 
	 * @param element
	 *            The context element at which to store the value, must not be
	 *            {@code null}.
	 * @param value
	 *            The value to be associated with the specified element, may be
	 *            {@code null}.
	 * @return The previous value associated with the specified element or
	 *         {@code null} if there was no mapping for the key of the element
	 *         in the specified scope.
	 * @throws NullPointerException
	 *             If {@code element} is {@code null}.
	 * @throws ClassCastException
	 *             If the specified value is not assignment compatible with the
	 *             type declared by the context element.
	 * @deprecated Use {@link #put(ContextKeyFoundation, Object)} instead.
	 */
	@Deprecated
	public Object put(ContextElementFoundation element, Object value);

	/**
	 * Removes the specified context element from the execution context stack.
	 * 
	 * @param element
	 *            The context element to remove from this context, must not be
	 *            {@code null}.
	 * @return The previous value associated with the specified element or
	 *         {@code null} if there was no mapping for the key of the element
	 *         in the specified scope.
	 * @throws NullPointerException
	 *             If {@code element} is {@code null}.
	 * @deprecated Use {@link #remove(ContextKeyFoundation)} instead.
	 */
	@Deprecated
	public Object remove(ContextElementFoundation element);

	/**
	 * Gets the topmost execution context containing the specified key from the
	 * current stack of execution contexts.
	 * 
	 * @param key
	 *            The key to search for, must not be {@code null}.
	 * @return The topmost execution context containing the specified key or
	 *         {@code null} if no context contains the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 * @deprecated Use {@link #getDeclaringContext(Object)} instead.
	 */
	@Deprecated
	public LightweightExecutionContext findContextContainingKey(String key);

	/**
	 * Gets the execution context declaring the specified key. The declaring
	 * context is the closest execution context towards the bottom of the stack
	 * that contains the given key.
	 * 
	 * @param key
	 *            The key to search for, must not be {@code null}.
	 * @return The declaring execution context for the specified key or
	 *         {@code null} if no context contains the key.
	 * @throws NullPointerException
	 *             If {@code key} is {@code null}.
	 */
	public LightweightExecutionContext getDeclaringContext(Object key);

	/**
	 * Gets the parent context of this execution context. Every execution
	 * context has exactly one parent context, except the global execution
	 * context which has no parent context. The parent context provides access
	 * to the state of the calling model.
	 * 
	 * @return The parent context or {@code null} if and only if this context is
	 *         the global execution context.
	 */
	public LightweightExecutionContext getParent();

	/**
	 * Gets the global execution context. The global execution context is the
	 * ultimate ancestor of all execution contexts which are created during the
	 * execution of graph models. It is the direct parent of the execution
	 * context used by the root model.
	 * 
	 * @return The global execution context, never {@code null}.
	 */
	public LightweightExecutionContext getGlobalContext();

	/**
	 * Creates a new execution context which has this execution context as
	 * parent and behaves like this execution context. The child should inherit
	 * the behavior and the settings from its parent.
	 * 
	 * @return The new child context.
	 */
	public LightweightExecutionContext createNewChildContext();

}